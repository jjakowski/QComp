
#source octave-Rots.inp
 
#
#  
#
printf("\n   function [Cizxy,  Pauli_vec]=  Pauli_expansion(H,thrs )   \n\n")
printf("\n   function print_Pauli(Cizxy, Pauli_vec) \n"); 
printf("\n   function retval =  convert_Pauli2square( Cizxy, Pauli_vec) \n");
printf("\n   function  run_example()   \n");

function  [ qvec, Nq ] =  dec2ixyz ( ii) 
    #  maps  integer number into  Pauli matrices   {I,Z, X,Y} ->  {0,1,2,3}
    #     
    offs0 = "0"              ;
    qq   =   dec2base(ii,4)  ; 
    Nq   =   size(qq,2)      ;      
    qvec =   zeros(1,Nq)     ;
    for iq = 1:Nq 
        qvec(iq) =dec2base(ii,4)(Nq-iq+1) - offs0 ;     # least significant first   and most significant is last
    endfor 
 endfunction 

#######################################################################################


function [Cizxy,  Pauli_vec]=  Pauli_expansion(H,thrs )
   # thrs :   threshold   for sparse 
   #
   XX  = [0,1   ; 1, 0 ] ;   
   YY  = [0,-1i ;1i, 0 ] ;   
   ZZ  = [1,0   ; 0,-1 ] ;   
   II  = [1,0   ; 0, 1 ] ;  

   IZXY =zeros(2,2,4) ; IZXY(:,:,1) = II ;   IZXY(:,:,2) = ZZ ;IZXY(:,:,3) = XX ;   IZXY(:,:,4) = YY ;


  #Nb = size(H,1) ; 
  #Nq =  ceil(log2(Nb))  ;
  #N = 2^Nq ; 
  #NN   = N*N ; 
  #Htmp = eye(N) ; 

   Nb = size(H,1) ; 
   Nq =  ceil(log2(Nb))  ;
   N = 2^Nq ; 
   NN   = N*N ; 
   Htmp = sparse(eye(N)) ; 
   Htmp(1:Nb,1:Nb) =  H ;
   

   Cizxy     =   zeros(NN,1)  ;
   Pauli_vec =   zeros(NN,Nq) ; 

   for i=0:NN-1  #1024
        [ Pauli_string , Nq0 ] =  dec2ixyz ( i)   ;
         
        StringOp  = 1   ; 
        for iq =1:Nq    ; # N0q 
           if iq  <=  Nq0 
               id_IZXY  = Pauli_string(iq)   ; 
               qIZXY =  IZXY(:,:,id_IZXY+1)  ; 
           else 
               qIZXY =  II ; 
           endif
           StringOp =kron( qIZXY  ,StringOp) ; 
        endfor
    
        # tmp =  trace(H*StringOp)  
        Cizxy(i+1)           = trace(Htmp*StringOp)/N ;
        Pauli_vec(i+1,1:Nq0) =  Pauli_string ; 
   endfor    

   NPauli_terms  =0 ; 
   for i =1:NN 
      if  (abs(Cizxy(i)) >  thrs  )
        #printf("\n C= %14.7e  ", Cizxy(i))
        #printf("%c.","IZXY"(Pauli_vec(i,:)+1))
         NPauli_terms  +=1 ;
      endif
   endfor 
   printf("\n")

   [aa,perm] =sort(abs(Cizxy),"descend");  Cizxy = Cizxy(perm) ;  Pauli_vec = Pauli_vec(perm,:) ;
   Cizxy = Cizxy(1:NPauli_terms) ;
   Pauli_vec = Pauli_vec(1:NPauli_terms,:);

   for i =1:NPauli_terms 
      if  (abs(Cizxy(i)) >  thrs  )
         printf("\n C= %14.7e  ", Cizxy(i))
         printf("%c.","IZXY"(Pauli_vec(i,:)+1))
         NPauli_terms  +=1 ;
      endif
   endfor 
   printf("\n")
   
endfunction 

#######################################################################################
function print_Pauli(Cizxy, Pauli_vec) 
   Nterms =  size(Cizxy) ; 
   for i=1:Nterms
         printf("\n C= %14.7e  ", Cizxy(i))
         printf("%c.","IZXY"(Pauli_vec(i,:)+1))
   endfor 
   printf("\n");
endfunction

#####################################################################################
function retval =  convert_Pauli2square( Cizxy, Pauli_vec)
   #converts Pauli string operators to  matrix to square matrix

   XX  = [0,1   ; 1, 0 ] ;   
   YY  = [0,-1i ;1i, 0 ] ;   
   ZZ  = [1,0   ; 0,-1 ] ;   
   II  = [1,0   ; 0, 1 ] ;  

   IZXY =zeros(2,2,4) ; IZXY(:,:,1) = II ;   IZXY(:,:,2) = ZZ ;IZXY(:,:,3) = XX ;   IZXY(:,:,4) = YY ;

   Nq = size(Pauli_vec,2) ;

   NPauli_terms =  size(Cizxy);

   Htmp =   zeros(2^Nq,2^Nq) ;
   for i=1:NPauli_terms
      Pauli_term  = 1; 
      for iq =1:Nq 
        ixyz = Pauli_vec(i,iq)+1; 
        Pauli_term  = kron(IZXY(:,:,ixyz), Pauli_term ); 
      endfor
      CxPauli_term =  Cizxy(i)*Pauli_term 
      Htmp +=  Cizxy(i)*Pauli_term  ;
   endfor 
   retval  =Htmp ; 
endfunction

#######################################################################################
#-- check it
#  Demo example :  Harmonic  oscillator , change  number of qubits  Nq to play with
# different discretiation
#######################################################################################

#
#   Harmonic oscillator discretized  in real space:
#
printf(" .....   To see example for Pauli expansion of Harmonic oscillator  type:  run_example()   \n");
function  run_example() 
  printf("\n    Example: 4 qubits Hamornic oscilator  \n\n");
  Nq =  4  ;    # nunber of qubits 
  N =  2^Nq -1 ;
  k =1; 
  x=linspace(-5,5,N);  
  dx =x(2)-x(1) ; 
  d0=2*eye(N) ; d1=-eye(N-1); T=d0; T(1:N-1,2:N) +=d1;T(2:N,1:N-1)+= d1; T/=(dx**2); V=k*x.**2;  
  H = T +diag(V) ; [ch,eh]= eig(H) ;  plot(diag(eh),"o")

  #check it:
  #[aa,perm] =sort(abs(Cizxy),"descend");  Cizxy = Cizxy(perm) ;  Pauli_vec = Pauli_vec(perm,:) ;

  thrs =1e-10;
  [Cizxy,  Pauli_vec]=  Pauli_expansion(H,thrs ) ;
  Htmp = convert_Pauli2square ( Cizxy,  Pauli_vec) 

  printf("  Check  the difference between H and its Pauli expansion: %12.6e \n", norm(H-Htmp(1:N,1:N)));

endfunction
##########################################################################################
