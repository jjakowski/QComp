

#
S_x = [0,1  ;1  ,0 ] ;   
S_y = [0,-1i ;1i,0 ] ;   
S_z = [1,0   ; 0,-1 ] ;   
S_1 = [1,0   ; 0, 1 ]; 
Hadd = [1,1  ; 1,-1 ]/sqrt(2) ; 

XX = S_x ;  YY =S_y ;   ZZ =S_z ;  II =  S_1 ; HH =  Hadd ;

creation = 0.5*( XX -1j*YY)  ;  anihilation  =  0.5*(XX +1j*YY ) ; 
cr =creation         ;  an = anihilation ;   

#CNOT  =    
#CX    =    

CX = [ 1 0 0 0 ;  0 1 0 0 ; 0 0  0 1  ;  0 0 1 0 ];

#Rx(

function RRx  =  Rx( Theta)  
     #Pauli matrices:
      S_y = [0,-1i ;1i,0 ] ;   S_z = [1,0  ;0, -1  ] ;   S_x = [0,1  ; 1 , 0 ] ;  II  = [1,0  ; 0 , 1 ] ;
      RRx  =  II* cos(Theta/2)  - 1i* sin(Theta/2)*S_x ;  # = expm( -i*theta/2*XX) 
   
endfunction 


function RRy  =  Ry( Theta)  
     #Pauli matrices:
      S_y = [0,-1i ; 1i,0 ] ;   S_z = [1,0  ;0,-1  ] ;   S_x = [0,1  ; 1 , 0 ] ;  II  = [1,0  ; 0 , 1 ] ;
      RRy  =  II* cos(Theta/2)  - 1i* sin(Theta/2)*S_y ;  # = expm( -i*theta/2*YY) 
endfunction 


function RRz  =  Rz( Theta)  
     #Pauli matrices:
      S_y = [0,-1i ; 1i,0 ] ;   S_z = [1,0  ; 0, -1  ] ;   S_x = [0,1  ; 1 , 0 ] ;  II  = [1,0  ; 0 , 1 ] ;
      RRz  =  II* cos(Theta/2)  - 1i* sin(Theta/2)*S_z ;  # =  expm( -i*theta/2*ZZ) 
endfunction 

# SWAP  gate  :
#   CX(1,2,2)*CX(2,1,2)*CX(1,2,2)
function U = SWAP(i,j,Nbits) 
        S_y = [0,-1i ; 1i,0 ] ;   S_z = [1,0  ; 0, -1  ] ;   S_x = [0,1  ; 1 , 0 ] ;  II  = [1,0  ; 0 , 1 ] ;
        U = CX(i,j,Nbits) * CX(j,i,Nbits)* CX(i,j,Nbits) ;
endfunction 


# ASWAP ( see  Fig A1.  in Adv. Quantum Technol. 2021, 4, 2100012)
function  U=ASWAP(theta, phi, iq0,iq1,Nbits) 
       S_y = [0,-1i ; 1i,0 ] ;   S_z = [1,0  ; 0, -1  ] ;   S_x = [0,1  ; 1 , 0 ] ;  II  = [1,0  ; 0 , 1 ] ;
       RR  =Rz(phi +pi) * Ry(theta+ pi/2) ; 
       RR_adj = RR' ; 
       U = CX(iq1,iq0,Nbits) *kron(II,RR)* CX(iq0,iq1,Nbits)*kron(II,RR_adj)* CX(iq1,iq0,Nbits) ; 
endfunction

function  [  theta , U ] =  get_theta(Ham, mylist) 
  # get a theta for the Unitary matrix that dagonalizes a 2x2 Hamiltonian  given by indices:
  # U =  [cos(0.5*theta),-sin(0.5*theta)  ;  sin(0.5*theta), cos(0.5*theta) ] 
  # 
     k = mylist(1) ;  l = mylist(2) ; 

  #     H11 =  Ham(
  #  2*H_1q(1,2)/(H_1q(1,1) - H_1q(2,2)) 

   theta =  atan( 2*Ham(k,l)/(Ham(k,k)  - Ham(l,l)) ) ;
   theta_half = 0.5*theta ;
   #U = [cos(theta),  -sin(theta);  sin(theta), cos(theta) ]
   U = eye(size(Ham,1)) ;

   U(k,k)   = cos(theta_half);  U(k,l) =-sin(theta_half); 
   U(l,k)   = sin(theta_half);  U(l,l) = cos(theta_half); 

endfunction






function  vv1  =  vv(mylist,N)
        #size(mylist)
         mylist
         size(mylist)

        vv1 =zeros(N,1) ;   vv1(mylist)=1;
endfunction


k0  =  [ 1 0 ]'; 
k1  =  [ 0 1 ]';

k00  =  [ 1 0 0 0 ]'; 
k01  =  [ 0 1 0 0 ]';
k10  =  [ 0 0 1 0 ]';
k11  =  [ 0 0 0 1 ]';

k000 =  [ 1 0 0 0  0 0 0 0 ]'; 
k001 =  [ 0 1 0 0  0 0 0 0 ]';
k010 =  [ 0 0 1 0  0 0 0 0 ]';
k011 =  [ 0 0 0 1  0 0 0 0 ]';
k100 =  [ 0 0 0 0  1 0 0 0 ]';
k101 =  [ 0 0 0 0  0 1 0 0 ]';
k110 =  [ 0 0 0 0  0 0 1 0 ]';
k111 =  [ 0 0 0 0  0 0 0 1 ]';



k0000 =  [ 1 0 0 0  0 0 0 0  0 0 0 0  0 0 0 0 ]'; 
k0001 =  [ 0 1 0 0  0 0 0 0  0 0 0 0  0 0 0 0 ]'; 
k0010 =  [ 0 0 1 0  0 0 0 0  0 0 0 0  0 0 0 0 ]';
k0011 =  [ 0 0 0 1  0 0 0 0  0 0 0 0  0 0 0 0 ]';
k0100 =  [ 0 0 0 0  1 0 0 0  0 0 0 0  0 0 0 0 ]';
k0101 =  [ 0 0 0 0  0 1 0 0  0 0 0 0  0 0 0 0 ]';
k0110 =  [ 0 0 0 0  0 0 1 0  0 0 0 0  0 0 0 0 ]';
k0111 =  [ 0 0 0 0  0 0 0 1  0 0 0 0  0 0 0 0 ]';
k1000 =  [ 0 0 0 0  0 0 0 0  1 0 0 0  0 0 0 0 ]';
k1001 =  [ 0 0 0 0  0 0 0 0  0 1 0 0  0 0 0 0 ]';
k1010 =  [ 0 0 0 0  0 0 0 0  0 0 1 0  0 0 0 0 ]';
k1011 =  [ 0 0 0 0  0 0 0 0  0 0 0 1  0 0 0 0 ]';
k1100 =  [ 0 0 0 0  0 0 0 0  0 0 0 0  1 0 0 0 ]';
k1101 =  [ 0 0 0 0  0 0 0 0  0 0 0 0  0 1 0 0 ]';
k1110 =  [ 0 0 0 0  0 0 0 0  0 0 0 0  0 0 1 0 ]';
k1111 =  [ 0 0 0 0  0 0 0 0  0 0 0 0  0 0 0 1 ]';


#--- 5 qubits:
Nq= 5 ;  N = 2^Nq; iq =1 ; 
k00000 = eye(N)(:,iq++) ; k00001 = eye(N)(:,iq++) ; k00010 = eye(N)(:,iq++) ; k00011 = eye(N)(:,iq++) ;
k00100 = eye(N)(:,iq++) ; k00101 = eye(N)(:,iq++) ; k00110 = eye(N)(:,iq++) ; k00111 = eye(N)(:,iq++) ;
k01000 = eye(N)(:,iq++) ; k01001 = eye(N)(:,iq++) ; k01010 = eye(N)(:,iq++) ; k01011 = eye(N)(:,iq++) ;
k01100 = eye(N)(:,iq++) ; k01101 = eye(N)(:,iq++) ; k01110 = eye(N)(:,iq++) ; k01111 = eye(N)(:,iq++) ;
k10000 = eye(N)(:,iq++) ; k10001 = eye(N)(:,iq++) ; k10010 = eye(N)(:,iq++) ; k10011 = eye(N)(:,iq++) ;
k10100 = eye(N)(:,iq++) ; k10101 = eye(N)(:,iq++) ; k10110 = eye(N)(:,iq++) ; k10111 = eye(N)(:,iq++) ;
k11000 = eye(N)(:,iq++) ; k11001 = eye(N)(:,iq++) ; k11010 = eye(N)(:,iq++) ; k11011 = eye(N)(:,iq++) ;
k11100 = eye(N)(:,iq++) ; k11101 = eye(N)(:,iq++) ; k11110 = eye(N)(:,iq++) ; k11111 = eye(N)(:,iq++) ;


#--- 6 qubits:
Nq= 6 ;  N = 2^Nq; iq =1 ; 
k000000 = eye(N)(:,iq++) ; k000001 = eye(N)(:,iq++) ; k000010 = eye(N)(:,iq++) ; k000011 = eye(N)(:,iq++) ;
k000100 = eye(N)(:,iq++) ; k000101 = eye(N)(:,iq++) ; k000110 = eye(N)(:,iq++) ; k000111 = eye(N)(:,iq++) ;
k001000 = eye(N)(:,iq++) ; k001001 = eye(N)(:,iq++) ; k001010 = eye(N)(:,iq++) ; k001011 = eye(N)(:,iq++) ;
k001100 = eye(N)(:,iq++) ; k001101 = eye(N)(:,iq++) ; k001110 = eye(N)(:,iq++) ; k001111 = eye(N)(:,iq++) ;
k010000 = eye(N)(:,iq++) ; k010001 = eye(N)(:,iq++) ; k010010 = eye(N)(:,iq++) ; k010011 = eye(N)(:,iq++) ;
k010100 = eye(N)(:,iq++) ; k010101 = eye(N)(:,iq++) ; k010110 = eye(N)(:,iq++) ; k010111 = eye(N)(:,iq++) ;
k011000 = eye(N)(:,iq++) ; k011001 = eye(N)(:,iq++) ; k011010 = eye(N)(:,iq++) ; k011011 = eye(N)(:,iq++) ;
k011100 = eye(N)(:,iq++) ; k011101 = eye(N)(:,iq++) ; k011110 = eye(N)(:,iq++) ; k011111 = eye(N)(:,iq++) ;
k100000 = eye(N)(:,iq++) ; k100001 = eye(N)(:,iq++) ; k100010 = eye(N)(:,iq++) ; k100011 = eye(N)(:,iq++) ;
k100100 = eye(N)(:,iq++) ; k100101 = eye(N)(:,iq++) ; k100110 = eye(N)(:,iq++) ; k100111 = eye(N)(:,iq++) ;
k101000 = eye(N)(:,iq++) ; k101001 = eye(N)(:,iq++) ; k101010 = eye(N)(:,iq++) ; k101011 = eye(N)(:,iq++) ;
k101100 = eye(N)(:,iq++) ; k101101 = eye(N)(:,iq++) ; k101110 = eye(N)(:,iq++) ; k101111 = eye(N)(:,iq++) ;
k110000 = eye(N)(:,iq++) ; k110001 = eye(N)(:,iq++) ; k110010 = eye(N)(:,iq++) ; k110011 = eye(N)(:,iq++) ;
k110100 = eye(N)(:,iq++) ; k110101 = eye(N)(:,iq++) ; k110110 = eye(N)(:,iq++) ; k110111 = eye(N)(:,iq++) ;
k111000 = eye(N)(:,iq++) ; k111001 = eye(N)(:,iq++) ; k111010 = eye(N)(:,iq++) ; k111011 = eye(N)(:,iq++) ;
k111100 = eye(N)(:,iq++) ; k111101 = eye(N)(:,iq++) ; k111110 = eye(N)(:,iq++) ; k111111 = eye(N)(:,iq++) ;



#--- 7 qubits:
Nq= 7 ;  N = 2^Nq; iq =1 ; 
k0000000 = eye(N)(:,iq++) ; k0000001 = eye(N)(:,iq++) ; k0000010 = eye(N)(:,iq++) ; k0000011 = eye(N)(:,iq++) ;
k0000100 = eye(N)(:,iq++) ; k0000101 = eye(N)(:,iq++) ; k0000110 = eye(N)(:,iq++) ; k0000111 = eye(N)(:,iq++) ;
k0001000 = eye(N)(:,iq++) ; k0001001 = eye(N)(:,iq++) ; k0001010 = eye(N)(:,iq++) ; k0001011 = eye(N)(:,iq++) ;
k0001100 = eye(N)(:,iq++) ; k0001101 = eye(N)(:,iq++) ; k0001110 = eye(N)(:,iq++) ; k0001111 = eye(N)(:,iq++) ;
k0010000 = eye(N)(:,iq++) ; k0010001 = eye(N)(:,iq++) ; k0010010 = eye(N)(:,iq++) ; k0010011 = eye(N)(:,iq++) ;
k0010100 = eye(N)(:,iq++) ; k0010101 = eye(N)(:,iq++) ; k0010110 = eye(N)(:,iq++) ; k0010111 = eye(N)(:,iq++) ;
k0011000 = eye(N)(:,iq++) ; k0011001 = eye(N)(:,iq++) ; k0011010 = eye(N)(:,iq++) ; k0011011 = eye(N)(:,iq++) ;
k0011100 = eye(N)(:,iq++) ; k0011101 = eye(N)(:,iq++) ; k0011110 = eye(N)(:,iq++) ; k0011111 = eye(N)(:,iq++) ;
k0100000 = eye(N)(:,iq++) ; k0100001 = eye(N)(:,iq++) ; k0100010 = eye(N)(:,iq++) ; k0100011 = eye(N)(:,iq++) ;
k0100100 = eye(N)(:,iq++) ; k0100101 = eye(N)(:,iq++) ; k0100110 = eye(N)(:,iq++) ; k0100111 = eye(N)(:,iq++) ;
k0101000 = eye(N)(:,iq++) ; k0101001 = eye(N)(:,iq++) ; k0101010 = eye(N)(:,iq++) ; k0101011 = eye(N)(:,iq++) ;
k0101100 = eye(N)(:,iq++) ; k0101101 = eye(N)(:,iq++) ; k0101110 = eye(N)(:,iq++) ; k0101111 = eye(N)(:,iq++) ;
k0110000 = eye(N)(:,iq++) ; k0110001 = eye(N)(:,iq++) ; k0110010 = eye(N)(:,iq++) ; k0110011 = eye(N)(:,iq++) ;
k0110100 = eye(N)(:,iq++) ; k0110101 = eye(N)(:,iq++) ; k0110110 = eye(N)(:,iq++) ; k0110111 = eye(N)(:,iq++) ;
k0111000 = eye(N)(:,iq++) ; k0111001 = eye(N)(:,iq++) ; k0111010 = eye(N)(:,iq++) ; k0111011 = eye(N)(:,iq++) ;
k0111100 = eye(N)(:,iq++) ; k0111101 = eye(N)(:,iq++) ; k0111110 = eye(N)(:,iq++) ; k0111111 = eye(N)(:,iq++) ;
k1000000 = eye(N)(:,iq++) ; k1000001 = eye(N)(:,iq++) ; k1000010 = eye(N)(:,iq++) ; k1000011 = eye(N)(:,iq++) ;
k1000100 = eye(N)(:,iq++) ; k1000101 = eye(N)(:,iq++) ; k1000110 = eye(N)(:,iq++) ; k1000111 = eye(N)(:,iq++) ;
k1001000 = eye(N)(:,iq++) ; k1001001 = eye(N)(:,iq++) ; k1001010 = eye(N)(:,iq++) ; k1001011 = eye(N)(:,iq++) ;
k1001100 = eye(N)(:,iq++) ; k1001101 = eye(N)(:,iq++) ; k1001110 = eye(N)(:,iq++) ; k1001111 = eye(N)(:,iq++) ;
k1010000 = eye(N)(:,iq++) ; k1010001 = eye(N)(:,iq++) ; k1010010 = eye(N)(:,iq++) ; k1010011 = eye(N)(:,iq++) ;
k1010100 = eye(N)(:,iq++) ; k1010101 = eye(N)(:,iq++) ; k1010110 = eye(N)(:,iq++) ; k1010111 = eye(N)(:,iq++) ;
k1011000 = eye(N)(:,iq++) ; k1011001 = eye(N)(:,iq++) ; k1011010 = eye(N)(:,iq++) ; k1011011 = eye(N)(:,iq++) ;
k1011100 = eye(N)(:,iq++) ; k1011101 = eye(N)(:,iq++) ; k1011110 = eye(N)(:,iq++) ; k1011111 = eye(N)(:,iq++) ;
k1100000 = eye(N)(:,iq++) ; k1100001 = eye(N)(:,iq++) ; k1100010 = eye(N)(:,iq++) ; k1100011 = eye(N)(:,iq++) ;
k1100100 = eye(N)(:,iq++) ; k1100101 = eye(N)(:,iq++) ; k1100110 = eye(N)(:,iq++) ; k1100111 = eye(N)(:,iq++) ;
k1101000 = eye(N)(:,iq++) ; k1101001 = eye(N)(:,iq++) ; k1101010 = eye(N)(:,iq++) ; k1101011 = eye(N)(:,iq++) ;
k1101100 = eye(N)(:,iq++) ; k1101101 = eye(N)(:,iq++) ; k1101110 = eye(N)(:,iq++) ; k1101111 = eye(N)(:,iq++) ;
k1110000 = eye(N)(:,iq++) ; k1110001 = eye(N)(:,iq++) ; k1110010 = eye(N)(:,iq++) ; k1110011 = eye(N)(:,iq++) ;
k1110100 = eye(N)(:,iq++) ; k1110101 = eye(N)(:,iq++) ; k1110110 = eye(N)(:,iq++) ; k1110111 = eye(N)(:,iq++) ;
k1111000 = eye(N)(:,iq++) ; k1111001 = eye(N)(:,iq++) ; k1111010 = eye(N)(:,iq++) ; k1111011 = eye(N)(:,iq++) ;
k1111100 = eye(N)(:,iq++) ; k1111101 = eye(N)(:,iq++) ; k1111110 = eye(N)(:,iq++) ; k1111111 = eye(N)(:,iq++) ;



#--- 8 qubits:
Nq= 8 ;  N = 2^Nq; iq =1 ; 
k00000000 = eye(N)(:,iq++) ; k00000001 = eye(N)(:,iq++) ; k00000010 = eye(N)(:,iq++) ; k00000011 = eye(N)(:,iq++) ;
k00000100 = eye(N)(:,iq++) ; k00000101 = eye(N)(:,iq++) ; k00000110 = eye(N)(:,iq++) ; k00000111 = eye(N)(:,iq++) ;
k00001000 = eye(N)(:,iq++) ; k00001001 = eye(N)(:,iq++) ; k00001010 = eye(N)(:,iq++) ; k00001011 = eye(N)(:,iq++) ;
k00001100 = eye(N)(:,iq++) ; k00001101 = eye(N)(:,iq++) ; k00001110 = eye(N)(:,iq++) ; k00001111 = eye(N)(:,iq++) ;
k00010000 = eye(N)(:,iq++) ; k00010001 = eye(N)(:,iq++) ; k00010010 = eye(N)(:,iq++) ; k00010011 = eye(N)(:,iq++) ;
k00010100 = eye(N)(:,iq++) ; k00010101 = eye(N)(:,iq++) ; k00010110 = eye(N)(:,iq++) ; k00010111 = eye(N)(:,iq++) ;
k00011000 = eye(N)(:,iq++) ; k00011001 = eye(N)(:,iq++) ; k00011010 = eye(N)(:,iq++) ; k00011011 = eye(N)(:,iq++) ;
k00011100 = eye(N)(:,iq++) ; k00011101 = eye(N)(:,iq++) ; k00011110 = eye(N)(:,iq++) ; k00011111 = eye(N)(:,iq++) ;
k00100000 = eye(N)(:,iq++) ; k00100001 = eye(N)(:,iq++) ; k00100010 = eye(N)(:,iq++) ; k00100011 = eye(N)(:,iq++) ;
k00100100 = eye(N)(:,iq++) ; k00100101 = eye(N)(:,iq++) ; k00100110 = eye(N)(:,iq++) ; k00100111 = eye(N)(:,iq++) ;
k00101000 = eye(N)(:,iq++) ; k00101001 = eye(N)(:,iq++) ; k00101010 = eye(N)(:,iq++) ; k00101011 = eye(N)(:,iq++) ;
k00101100 = eye(N)(:,iq++) ; k00101101 = eye(N)(:,iq++) ; k00101110 = eye(N)(:,iq++) ; k00101111 = eye(N)(:,iq++) ;
k00110000 = eye(N)(:,iq++) ; k00110001 = eye(N)(:,iq++) ; k00110010 = eye(N)(:,iq++) ; k00110011 = eye(N)(:,iq++) ;
k00110100 = eye(N)(:,iq++) ; k00110101 = eye(N)(:,iq++) ; k00110110 = eye(N)(:,iq++) ; k00110111 = eye(N)(:,iq++) ;
k00111000 = eye(N)(:,iq++) ; k00111001 = eye(N)(:,iq++) ; k00111010 = eye(N)(:,iq++) ; k00111011 = eye(N)(:,iq++) ;
k00111100 = eye(N)(:,iq++) ; k00111101 = eye(N)(:,iq++) ; k00111110 = eye(N)(:,iq++) ; k00111111 = eye(N)(:,iq++) ;
k01000000 = eye(N)(:,iq++) ; k01000001 = eye(N)(:,iq++) ; k01000010 = eye(N)(:,iq++) ; k01000011 = eye(N)(:,iq++) ;
k01000100 = eye(N)(:,iq++) ; k01000101 = eye(N)(:,iq++) ; k01000110 = eye(N)(:,iq++) ; k01000111 = eye(N)(:,iq++) ;
k01001000 = eye(N)(:,iq++) ; k01001001 = eye(N)(:,iq++) ; k01001010 = eye(N)(:,iq++) ; k01001011 = eye(N)(:,iq++) ;
k01001100 = eye(N)(:,iq++) ; k01001101 = eye(N)(:,iq++) ; k01001110 = eye(N)(:,iq++) ; k01001111 = eye(N)(:,iq++) ;
k01010000 = eye(N)(:,iq++) ; k01010001 = eye(N)(:,iq++) ; k01010010 = eye(N)(:,iq++) ; k01010011 = eye(N)(:,iq++) ;
k01010100 = eye(N)(:,iq++) ; k01010101 = eye(N)(:,iq++) ; k01010110 = eye(N)(:,iq++) ; k01010111 = eye(N)(:,iq++) ;
k01011000 = eye(N)(:,iq++) ; k01011001 = eye(N)(:,iq++) ; k01011010 = eye(N)(:,iq++) ; k01011011 = eye(N)(:,iq++) ;
k01011100 = eye(N)(:,iq++) ; k01011101 = eye(N)(:,iq++) ; k01011110 = eye(N)(:,iq++) ; k01011111 = eye(N)(:,iq++) ;
k01100000 = eye(N)(:,iq++) ; k01100001 = eye(N)(:,iq++) ; k01100010 = eye(N)(:,iq++) ; k01100011 = eye(N)(:,iq++) ;
k01100100 = eye(N)(:,iq++) ; k01100101 = eye(N)(:,iq++) ; k01100110 = eye(N)(:,iq++) ; k01100111 = eye(N)(:,iq++) ;
k01101000 = eye(N)(:,iq++) ; k01101001 = eye(N)(:,iq++) ; k01101010 = eye(N)(:,iq++) ; k01101011 = eye(N)(:,iq++) ;
k01101100 = eye(N)(:,iq++) ; k01101101 = eye(N)(:,iq++) ; k01101110 = eye(N)(:,iq++) ; k01101111 = eye(N)(:,iq++) ;
k01110000 = eye(N)(:,iq++) ; k01110001 = eye(N)(:,iq++) ; k01110010 = eye(N)(:,iq++) ; k01110011 = eye(N)(:,iq++) ;
k01110100 = eye(N)(:,iq++) ; k01110101 = eye(N)(:,iq++) ; k01110110 = eye(N)(:,iq++) ; k01110111 = eye(N)(:,iq++) ;
k01111000 = eye(N)(:,iq++) ; k01111001 = eye(N)(:,iq++) ; k01111010 = eye(N)(:,iq++) ; k01111011 = eye(N)(:,iq++) ;
k01111100 = eye(N)(:,iq++) ; k01111101 = eye(N)(:,iq++) ; k01111110 = eye(N)(:,iq++) ; k01111111 = eye(N)(:,iq++) ;
k10000000 = eye(N)(:,iq++) ; k10000001 = eye(N)(:,iq++) ; k10000010 = eye(N)(:,iq++) ; k10000011 = eye(N)(:,iq++) ;
k10000100 = eye(N)(:,iq++) ; k10000101 = eye(N)(:,iq++) ; k10000110 = eye(N)(:,iq++) ; k10000111 = eye(N)(:,iq++) ;
k10001000 = eye(N)(:,iq++) ; k10001001 = eye(N)(:,iq++) ; k10001010 = eye(N)(:,iq++) ; k10001011 = eye(N)(:,iq++) ;
k10001100 = eye(N)(:,iq++) ; k10001101 = eye(N)(:,iq++) ; k10001110 = eye(N)(:,iq++) ; k10001111 = eye(N)(:,iq++) ;
k10010000 = eye(N)(:,iq++) ; k10010001 = eye(N)(:,iq++) ; k10010010 = eye(N)(:,iq++) ; k10010011 = eye(N)(:,iq++) ;
k10010100 = eye(N)(:,iq++) ; k10010101 = eye(N)(:,iq++) ; k10010110 = eye(N)(:,iq++) ; k10010111 = eye(N)(:,iq++) ;
k10011000 = eye(N)(:,iq++) ; k10011001 = eye(N)(:,iq++) ; k10011010 = eye(N)(:,iq++) ; k10011011 = eye(N)(:,iq++) ;
k10011100 = eye(N)(:,iq++) ; k10011101 = eye(N)(:,iq++) ; k10011110 = eye(N)(:,iq++) ; k10011111 = eye(N)(:,iq++) ;
k10100000 = eye(N)(:,iq++) ; k10100001 = eye(N)(:,iq++) ; k10100010 = eye(N)(:,iq++) ; k10100011 = eye(N)(:,iq++) ;
k10100100 = eye(N)(:,iq++) ; k10100101 = eye(N)(:,iq++) ; k10100110 = eye(N)(:,iq++) ; k10100111 = eye(N)(:,iq++) ;
k10101000 = eye(N)(:,iq++) ; k10101001 = eye(N)(:,iq++) ; k10101010 = eye(N)(:,iq++) ; k10101011 = eye(N)(:,iq++) ;
k10101100 = eye(N)(:,iq++) ; k10101101 = eye(N)(:,iq++) ; k10101110 = eye(N)(:,iq++) ; k10101111 = eye(N)(:,iq++) ;
k10110000 = eye(N)(:,iq++) ; k10110001 = eye(N)(:,iq++) ; k10110010 = eye(N)(:,iq++) ; k10110011 = eye(N)(:,iq++) ;
k10110100 = eye(N)(:,iq++) ; k10110101 = eye(N)(:,iq++) ; k10110110 = eye(N)(:,iq++) ; k10110111 = eye(N)(:,iq++) ;
k10111000 = eye(N)(:,iq++) ; k10111001 = eye(N)(:,iq++) ; k10111010 = eye(N)(:,iq++) ; k10111011 = eye(N)(:,iq++) ;
k10111100 = eye(N)(:,iq++) ; k10111101 = eye(N)(:,iq++) ; k10111110 = eye(N)(:,iq++) ; k10111111 = eye(N)(:,iq++) ;
k11000000 = eye(N)(:,iq++) ; k11000001 = eye(N)(:,iq++) ; k11000010 = eye(N)(:,iq++) ; k11000011 = eye(N)(:,iq++) ;
k11000100 = eye(N)(:,iq++) ; k11000101 = eye(N)(:,iq++) ; k11000110 = eye(N)(:,iq++) ; k11000111 = eye(N)(:,iq++) ;
k11001000 = eye(N)(:,iq++) ; k11001001 = eye(N)(:,iq++) ; k11001010 = eye(N)(:,iq++) ; k11001011 = eye(N)(:,iq++) ;
k11001100 = eye(N)(:,iq++) ; k11001101 = eye(N)(:,iq++) ; k11001110 = eye(N)(:,iq++) ; k11001111 = eye(N)(:,iq++) ;
k11010000 = eye(N)(:,iq++) ; k11010001 = eye(N)(:,iq++) ; k11010010 = eye(N)(:,iq++) ; k11010011 = eye(N)(:,iq++) ;
k11010100 = eye(N)(:,iq++) ; k11010101 = eye(N)(:,iq++) ; k11010110 = eye(N)(:,iq++) ; k11010111 = eye(N)(:,iq++) ;
k11011000 = eye(N)(:,iq++) ; k11011001 = eye(N)(:,iq++) ; k11011010 = eye(N)(:,iq++) ; k11011011 = eye(N)(:,iq++) ;
k11011100 = eye(N)(:,iq++) ; k11011101 = eye(N)(:,iq++) ; k11011110 = eye(N)(:,iq++) ; k11011111 = eye(N)(:,iq++) ;
k11100000 = eye(N)(:,iq++) ; k11100001 = eye(N)(:,iq++) ; k11100010 = eye(N)(:,iq++) ; k11100011 = eye(N)(:,iq++) ;
k11100100 = eye(N)(:,iq++) ; k11100101 = eye(N)(:,iq++) ; k11100110 = eye(N)(:,iq++) ; k11100111 = eye(N)(:,iq++) ;
k11101000 = eye(N)(:,iq++) ; k11101001 = eye(N)(:,iq++) ; k11101010 = eye(N)(:,iq++) ; k11101011 = eye(N)(:,iq++) ;
k11101100 = eye(N)(:,iq++) ; k11101101 = eye(N)(:,iq++) ; k11101110 = eye(N)(:,iq++) ; k11101111 = eye(N)(:,iq++) ;
k11110000 = eye(N)(:,iq++) ; k11110001 = eye(N)(:,iq++) ; k11110010 = eye(N)(:,iq++) ; k11110011 = eye(N)(:,iq++) ;
k11110100 = eye(N)(:,iq++) ; k11110101 = eye(N)(:,iq++) ; k11110110 = eye(N)(:,iq++) ; k11110111 = eye(N)(:,iq++) ;
k11111000 = eye(N)(:,iq++) ; k11111001 = eye(N)(:,iq++) ; k11111010 = eye(N)(:,iq++) ; k11111011 = eye(N)(:,iq++) ;
k11111100 = eye(N)(:,iq++) ; k11111101 = eye(N)(:,iq++) ; k11111110 = eye(N)(:,iq++) ; k11111111 = eye(N)(:,iq++) ;



#--- 9 qubits:
Nq= 9 ;  N = 2^Nq; iq =1 ; 
k000000000 = eye(N)(:,iq++) ; k000000001 = eye(N)(:,iq++) ; k000000010 = eye(N)(:,iq++) ; k000000011 = eye(N)(:,iq++) ;
k000000100 = eye(N)(:,iq++) ; k000000101 = eye(N)(:,iq++) ; k000000110 = eye(N)(:,iq++) ; k000000111 = eye(N)(:,iq++) ;
k000001000 = eye(N)(:,iq++) ; k000001001 = eye(N)(:,iq++) ; k000001010 = eye(N)(:,iq++) ; k000001011 = eye(N)(:,iq++) ;
k000001100 = eye(N)(:,iq++) ; k000001101 = eye(N)(:,iq++) ; k000001110 = eye(N)(:,iq++) ; k000001111 = eye(N)(:,iq++) ;
k000010000 = eye(N)(:,iq++) ; k000010001 = eye(N)(:,iq++) ; k000010010 = eye(N)(:,iq++) ; k000010011 = eye(N)(:,iq++) ;
k000010100 = eye(N)(:,iq++) ; k000010101 = eye(N)(:,iq++) ; k000010110 = eye(N)(:,iq++) ; k000010111 = eye(N)(:,iq++) ;
k000011000 = eye(N)(:,iq++) ; k000011001 = eye(N)(:,iq++) ; k000011010 = eye(N)(:,iq++) ; k000011011 = eye(N)(:,iq++) ;
k000011100 = eye(N)(:,iq++) ; k000011101 = eye(N)(:,iq++) ; k000011110 = eye(N)(:,iq++) ; k000011111 = eye(N)(:,iq++) ;
k000100000 = eye(N)(:,iq++) ; k000100001 = eye(N)(:,iq++) ; k000100010 = eye(N)(:,iq++) ; k000100011 = eye(N)(:,iq++) ;
k000100100 = eye(N)(:,iq++) ; k000100101 = eye(N)(:,iq++) ; k000100110 = eye(N)(:,iq++) ; k000100111 = eye(N)(:,iq++) ;
k000101000 = eye(N)(:,iq++) ; k000101001 = eye(N)(:,iq++) ; k000101010 = eye(N)(:,iq++) ; k000101011 = eye(N)(:,iq++) ;
k000101100 = eye(N)(:,iq++) ; k000101101 = eye(N)(:,iq++) ; k000101110 = eye(N)(:,iq++) ; k000101111 = eye(N)(:,iq++) ;
k000110000 = eye(N)(:,iq++) ; k000110001 = eye(N)(:,iq++) ; k000110010 = eye(N)(:,iq++) ; k000110011 = eye(N)(:,iq++) ;
k000110100 = eye(N)(:,iq++) ; k000110101 = eye(N)(:,iq++) ; k000110110 = eye(N)(:,iq++) ; k000110111 = eye(N)(:,iq++) ;
k000111000 = eye(N)(:,iq++) ; k000111001 = eye(N)(:,iq++) ; k000111010 = eye(N)(:,iq++) ; k000111011 = eye(N)(:,iq++) ;
k000111100 = eye(N)(:,iq++) ; k000111101 = eye(N)(:,iq++) ; k000111110 = eye(N)(:,iq++) ; k000111111 = eye(N)(:,iq++) ;
k001000000 = eye(N)(:,iq++) ; k001000001 = eye(N)(:,iq++) ; k001000010 = eye(N)(:,iq++) ; k001000011 = eye(N)(:,iq++) ;
k001000100 = eye(N)(:,iq++) ; k001000101 = eye(N)(:,iq++) ; k001000110 = eye(N)(:,iq++) ; k001000111 = eye(N)(:,iq++) ;
k001001000 = eye(N)(:,iq++) ; k001001001 = eye(N)(:,iq++) ; k001001010 = eye(N)(:,iq++) ; k001001011 = eye(N)(:,iq++) ;
k001001100 = eye(N)(:,iq++) ; k001001101 = eye(N)(:,iq++) ; k001001110 = eye(N)(:,iq++) ; k001001111 = eye(N)(:,iq++) ;
k001010000 = eye(N)(:,iq++) ; k001010001 = eye(N)(:,iq++) ; k001010010 = eye(N)(:,iq++) ; k001010011 = eye(N)(:,iq++) ;
k001010100 = eye(N)(:,iq++) ; k001010101 = eye(N)(:,iq++) ; k001010110 = eye(N)(:,iq++) ; k001010111 = eye(N)(:,iq++) ;
k001011000 = eye(N)(:,iq++) ; k001011001 = eye(N)(:,iq++) ; k001011010 = eye(N)(:,iq++) ; k001011011 = eye(N)(:,iq++) ;
k001011100 = eye(N)(:,iq++) ; k001011101 = eye(N)(:,iq++) ; k001011110 = eye(N)(:,iq++) ; k001011111 = eye(N)(:,iq++) ;
k001100000 = eye(N)(:,iq++) ; k001100001 = eye(N)(:,iq++) ; k001100010 = eye(N)(:,iq++) ; k001100011 = eye(N)(:,iq++) ;
k001100100 = eye(N)(:,iq++) ; k001100101 = eye(N)(:,iq++) ; k001100110 = eye(N)(:,iq++) ; k001100111 = eye(N)(:,iq++) ;
k001101000 = eye(N)(:,iq++) ; k001101001 = eye(N)(:,iq++) ; k001101010 = eye(N)(:,iq++) ; k001101011 = eye(N)(:,iq++) ;
k001101100 = eye(N)(:,iq++) ; k001101101 = eye(N)(:,iq++) ; k001101110 = eye(N)(:,iq++) ; k001101111 = eye(N)(:,iq++) ;
k001110000 = eye(N)(:,iq++) ; k001110001 = eye(N)(:,iq++) ; k001110010 = eye(N)(:,iq++) ; k001110011 = eye(N)(:,iq++) ;
k001110100 = eye(N)(:,iq++) ; k001110101 = eye(N)(:,iq++) ; k001110110 = eye(N)(:,iq++) ; k001110111 = eye(N)(:,iq++) ;
k001111000 = eye(N)(:,iq++) ; k001111001 = eye(N)(:,iq++) ; k001111010 = eye(N)(:,iq++) ; k001111011 = eye(N)(:,iq++) ;
k001111100 = eye(N)(:,iq++) ; k001111101 = eye(N)(:,iq++) ; k001111110 = eye(N)(:,iq++) ; k001111111 = eye(N)(:,iq++) ;
k010000000 = eye(N)(:,iq++) ; k010000001 = eye(N)(:,iq++) ; k010000010 = eye(N)(:,iq++) ; k010000011 = eye(N)(:,iq++) ;
k010000100 = eye(N)(:,iq++) ; k010000101 = eye(N)(:,iq++) ; k010000110 = eye(N)(:,iq++) ; k010000111 = eye(N)(:,iq++) ;
k010001000 = eye(N)(:,iq++) ; k010001001 = eye(N)(:,iq++) ; k010001010 = eye(N)(:,iq++) ; k010001011 = eye(N)(:,iq++) ;
k010001100 = eye(N)(:,iq++) ; k010001101 = eye(N)(:,iq++) ; k010001110 = eye(N)(:,iq++) ; k010001111 = eye(N)(:,iq++) ;
k010010000 = eye(N)(:,iq++) ; k010010001 = eye(N)(:,iq++) ; k010010010 = eye(N)(:,iq++) ; k010010011 = eye(N)(:,iq++) ;
k010010100 = eye(N)(:,iq++) ; k010010101 = eye(N)(:,iq++) ; k010010110 = eye(N)(:,iq++) ; k010010111 = eye(N)(:,iq++) ;
k010011000 = eye(N)(:,iq++) ; k010011001 = eye(N)(:,iq++) ; k010011010 = eye(N)(:,iq++) ; k010011011 = eye(N)(:,iq++) ;
k010011100 = eye(N)(:,iq++) ; k010011101 = eye(N)(:,iq++) ; k010011110 = eye(N)(:,iq++) ; k010011111 = eye(N)(:,iq++) ;
k010100000 = eye(N)(:,iq++) ; k010100001 = eye(N)(:,iq++) ; k010100010 = eye(N)(:,iq++) ; k010100011 = eye(N)(:,iq++) ;
k010100100 = eye(N)(:,iq++) ; k010100101 = eye(N)(:,iq++) ; k010100110 = eye(N)(:,iq++) ; k010100111 = eye(N)(:,iq++) ;
k010101000 = eye(N)(:,iq++) ; k010101001 = eye(N)(:,iq++) ; k010101010 = eye(N)(:,iq++) ; k010101011 = eye(N)(:,iq++) ;
k010101100 = eye(N)(:,iq++) ; k010101101 = eye(N)(:,iq++) ; k010101110 = eye(N)(:,iq++) ; k010101111 = eye(N)(:,iq++) ;
k010110000 = eye(N)(:,iq++) ; k010110001 = eye(N)(:,iq++) ; k010110010 = eye(N)(:,iq++) ; k010110011 = eye(N)(:,iq++) ;
k010110100 = eye(N)(:,iq++) ; k010110101 = eye(N)(:,iq++) ; k010110110 = eye(N)(:,iq++) ; k010110111 = eye(N)(:,iq++) ;
k010111000 = eye(N)(:,iq++) ; k010111001 = eye(N)(:,iq++) ; k010111010 = eye(N)(:,iq++) ; k010111011 = eye(N)(:,iq++) ;
k010111100 = eye(N)(:,iq++) ; k010111101 = eye(N)(:,iq++) ; k010111110 = eye(N)(:,iq++) ; k010111111 = eye(N)(:,iq++) ;
k011000000 = eye(N)(:,iq++) ; k011000001 = eye(N)(:,iq++) ; k011000010 = eye(N)(:,iq++) ; k011000011 = eye(N)(:,iq++) ;
k011000100 = eye(N)(:,iq++) ; k011000101 = eye(N)(:,iq++) ; k011000110 = eye(N)(:,iq++) ; k011000111 = eye(N)(:,iq++) ;
k011001000 = eye(N)(:,iq++) ; k011001001 = eye(N)(:,iq++) ; k011001010 = eye(N)(:,iq++) ; k011001011 = eye(N)(:,iq++) ;
k011001100 = eye(N)(:,iq++) ; k011001101 = eye(N)(:,iq++) ; k011001110 = eye(N)(:,iq++) ; k011001111 = eye(N)(:,iq++) ;
k011010000 = eye(N)(:,iq++) ; k011010001 = eye(N)(:,iq++) ; k011010010 = eye(N)(:,iq++) ; k011010011 = eye(N)(:,iq++) ;
k011010100 = eye(N)(:,iq++) ; k011010101 = eye(N)(:,iq++) ; k011010110 = eye(N)(:,iq++) ; k011010111 = eye(N)(:,iq++) ;
k011011000 = eye(N)(:,iq++) ; k011011001 = eye(N)(:,iq++) ; k011011010 = eye(N)(:,iq++) ; k011011011 = eye(N)(:,iq++) ;
k011011100 = eye(N)(:,iq++) ; k011011101 = eye(N)(:,iq++) ; k011011110 = eye(N)(:,iq++) ; k011011111 = eye(N)(:,iq++) ;
k011100000 = eye(N)(:,iq++) ; k011100001 = eye(N)(:,iq++) ; k011100010 = eye(N)(:,iq++) ; k011100011 = eye(N)(:,iq++) ;
k011100100 = eye(N)(:,iq++) ; k011100101 = eye(N)(:,iq++) ; k011100110 = eye(N)(:,iq++) ; k011100111 = eye(N)(:,iq++) ;
k011101000 = eye(N)(:,iq++) ; k011101001 = eye(N)(:,iq++) ; k011101010 = eye(N)(:,iq++) ; k011101011 = eye(N)(:,iq++) ;
k011101100 = eye(N)(:,iq++) ; k011101101 = eye(N)(:,iq++) ; k011101110 = eye(N)(:,iq++) ; k011101111 = eye(N)(:,iq++) ;
k011110000 = eye(N)(:,iq++) ; k011110001 = eye(N)(:,iq++) ; k011110010 = eye(N)(:,iq++) ; k011110011 = eye(N)(:,iq++) ;
k011110100 = eye(N)(:,iq++) ; k011110101 = eye(N)(:,iq++) ; k011110110 = eye(N)(:,iq++) ; k011110111 = eye(N)(:,iq++) ;
k011111000 = eye(N)(:,iq++) ; k011111001 = eye(N)(:,iq++) ; k011111010 = eye(N)(:,iq++) ; k011111011 = eye(N)(:,iq++) ;
k011111100 = eye(N)(:,iq++) ; k011111101 = eye(N)(:,iq++) ; k011111110 = eye(N)(:,iq++) ; k011111111 = eye(N)(:,iq++) ;
k100000000 = eye(N)(:,iq++) ; k100000001 = eye(N)(:,iq++) ; k100000010 = eye(N)(:,iq++) ; k100000011 = eye(N)(:,iq++) ;
k100000100 = eye(N)(:,iq++) ; k100000101 = eye(N)(:,iq++) ; k100000110 = eye(N)(:,iq++) ; k100000111 = eye(N)(:,iq++) ;
k100001000 = eye(N)(:,iq++) ; k100001001 = eye(N)(:,iq++) ; k100001010 = eye(N)(:,iq++) ; k100001011 = eye(N)(:,iq++) ;
k100001100 = eye(N)(:,iq++) ; k100001101 = eye(N)(:,iq++) ; k100001110 = eye(N)(:,iq++) ; k100001111 = eye(N)(:,iq++) ;
k100010000 = eye(N)(:,iq++) ; k100010001 = eye(N)(:,iq++) ; k100010010 = eye(N)(:,iq++) ; k100010011 = eye(N)(:,iq++) ;
k100010100 = eye(N)(:,iq++) ; k100010101 = eye(N)(:,iq++) ; k100010110 = eye(N)(:,iq++) ; k100010111 = eye(N)(:,iq++) ;
k100011000 = eye(N)(:,iq++) ; k100011001 = eye(N)(:,iq++) ; k100011010 = eye(N)(:,iq++) ; k100011011 = eye(N)(:,iq++) ;
k100011100 = eye(N)(:,iq++) ; k100011101 = eye(N)(:,iq++) ; k100011110 = eye(N)(:,iq++) ; k100011111 = eye(N)(:,iq++) ;
k100100000 = eye(N)(:,iq++) ; k100100001 = eye(N)(:,iq++) ; k100100010 = eye(N)(:,iq++) ; k100100011 = eye(N)(:,iq++) ;
k100100100 = eye(N)(:,iq++) ; k100100101 = eye(N)(:,iq++) ; k100100110 = eye(N)(:,iq++) ; k100100111 = eye(N)(:,iq++) ;
k100101000 = eye(N)(:,iq++) ; k100101001 = eye(N)(:,iq++) ; k100101010 = eye(N)(:,iq++) ; k100101011 = eye(N)(:,iq++) ;
k100101100 = eye(N)(:,iq++) ; k100101101 = eye(N)(:,iq++) ; k100101110 = eye(N)(:,iq++) ; k100101111 = eye(N)(:,iq++) ;
k100110000 = eye(N)(:,iq++) ; k100110001 = eye(N)(:,iq++) ; k100110010 = eye(N)(:,iq++) ; k100110011 = eye(N)(:,iq++) ;
k100110100 = eye(N)(:,iq++) ; k100110101 = eye(N)(:,iq++) ; k100110110 = eye(N)(:,iq++) ; k100110111 = eye(N)(:,iq++) ;
k100111000 = eye(N)(:,iq++) ; k100111001 = eye(N)(:,iq++) ; k100111010 = eye(N)(:,iq++) ; k100111011 = eye(N)(:,iq++) ;
k100111100 = eye(N)(:,iq++) ; k100111101 = eye(N)(:,iq++) ; k100111110 = eye(N)(:,iq++) ; k100111111 = eye(N)(:,iq++) ;
k101000000 = eye(N)(:,iq++) ; k101000001 = eye(N)(:,iq++) ; k101000010 = eye(N)(:,iq++) ; k101000011 = eye(N)(:,iq++) ;
k101000100 = eye(N)(:,iq++) ; k101000101 = eye(N)(:,iq++) ; k101000110 = eye(N)(:,iq++) ; k101000111 = eye(N)(:,iq++) ;
k101001000 = eye(N)(:,iq++) ; k101001001 = eye(N)(:,iq++) ; k101001010 = eye(N)(:,iq++) ; k101001011 = eye(N)(:,iq++) ;
k101001100 = eye(N)(:,iq++) ; k101001101 = eye(N)(:,iq++) ; k101001110 = eye(N)(:,iq++) ; k101001111 = eye(N)(:,iq++) ;
k101010000 = eye(N)(:,iq++) ; k101010001 = eye(N)(:,iq++) ; k101010010 = eye(N)(:,iq++) ; k101010011 = eye(N)(:,iq++) ;
k101010100 = eye(N)(:,iq++) ; k101010101 = eye(N)(:,iq++) ; k101010110 = eye(N)(:,iq++) ; k101010111 = eye(N)(:,iq++) ;
k101011000 = eye(N)(:,iq++) ; k101011001 = eye(N)(:,iq++) ; k101011010 = eye(N)(:,iq++) ; k101011011 = eye(N)(:,iq++) ;
k101011100 = eye(N)(:,iq++) ; k101011101 = eye(N)(:,iq++) ; k101011110 = eye(N)(:,iq++) ; k101011111 = eye(N)(:,iq++) ;
k101100000 = eye(N)(:,iq++) ; k101100001 = eye(N)(:,iq++) ; k101100010 = eye(N)(:,iq++) ; k101100011 = eye(N)(:,iq++) ;
k101100100 = eye(N)(:,iq++) ; k101100101 = eye(N)(:,iq++) ; k101100110 = eye(N)(:,iq++) ; k101100111 = eye(N)(:,iq++) ;
k101101000 = eye(N)(:,iq++) ; k101101001 = eye(N)(:,iq++) ; k101101010 = eye(N)(:,iq++) ; k101101011 = eye(N)(:,iq++) ;
k101101100 = eye(N)(:,iq++) ; k101101101 = eye(N)(:,iq++) ; k101101110 = eye(N)(:,iq++) ; k101101111 = eye(N)(:,iq++) ;
k101110000 = eye(N)(:,iq++) ; k101110001 = eye(N)(:,iq++) ; k101110010 = eye(N)(:,iq++) ; k101110011 = eye(N)(:,iq++) ;
k101110100 = eye(N)(:,iq++) ; k101110101 = eye(N)(:,iq++) ; k101110110 = eye(N)(:,iq++) ; k101110111 = eye(N)(:,iq++) ;
k101111000 = eye(N)(:,iq++) ; k101111001 = eye(N)(:,iq++) ; k101111010 = eye(N)(:,iq++) ; k101111011 = eye(N)(:,iq++) ;
k101111100 = eye(N)(:,iq++) ; k101111101 = eye(N)(:,iq++) ; k101111110 = eye(N)(:,iq++) ; k101111111 = eye(N)(:,iq++) ;
k110000000 = eye(N)(:,iq++) ; k110000001 = eye(N)(:,iq++) ; k110000010 = eye(N)(:,iq++) ; k110000011 = eye(N)(:,iq++) ;
k110000100 = eye(N)(:,iq++) ; k110000101 = eye(N)(:,iq++) ; k110000110 = eye(N)(:,iq++) ; k110000111 = eye(N)(:,iq++) ;
k110001000 = eye(N)(:,iq++) ; k110001001 = eye(N)(:,iq++) ; k110001010 = eye(N)(:,iq++) ; k110001011 = eye(N)(:,iq++) ;
k110001100 = eye(N)(:,iq++) ; k110001101 = eye(N)(:,iq++) ; k110001110 = eye(N)(:,iq++) ; k110001111 = eye(N)(:,iq++) ;
k110010000 = eye(N)(:,iq++) ; k110010001 = eye(N)(:,iq++) ; k110010010 = eye(N)(:,iq++) ; k110010011 = eye(N)(:,iq++) ;
k110010100 = eye(N)(:,iq++) ; k110010101 = eye(N)(:,iq++) ; k110010110 = eye(N)(:,iq++) ; k110010111 = eye(N)(:,iq++) ;
k110011000 = eye(N)(:,iq++) ; k110011001 = eye(N)(:,iq++) ; k110011010 = eye(N)(:,iq++) ; k110011011 = eye(N)(:,iq++) ;
k110011100 = eye(N)(:,iq++) ; k110011101 = eye(N)(:,iq++) ; k110011110 = eye(N)(:,iq++) ; k110011111 = eye(N)(:,iq++) ;
k110100000 = eye(N)(:,iq++) ; k110100001 = eye(N)(:,iq++) ; k110100010 = eye(N)(:,iq++) ; k110100011 = eye(N)(:,iq++) ;
k110100100 = eye(N)(:,iq++) ; k110100101 = eye(N)(:,iq++) ; k110100110 = eye(N)(:,iq++) ; k110100111 = eye(N)(:,iq++) ;
k110101000 = eye(N)(:,iq++) ; k110101001 = eye(N)(:,iq++) ; k110101010 = eye(N)(:,iq++) ; k110101011 = eye(N)(:,iq++) ;
k110101100 = eye(N)(:,iq++) ; k110101101 = eye(N)(:,iq++) ; k110101110 = eye(N)(:,iq++) ; k110101111 = eye(N)(:,iq++) ;
k110110000 = eye(N)(:,iq++) ; k110110001 = eye(N)(:,iq++) ; k110110010 = eye(N)(:,iq++) ; k110110011 = eye(N)(:,iq++) ;
k110110100 = eye(N)(:,iq++) ; k110110101 = eye(N)(:,iq++) ; k110110110 = eye(N)(:,iq++) ; k110110111 = eye(N)(:,iq++) ;
k110111000 = eye(N)(:,iq++) ; k110111001 = eye(N)(:,iq++) ; k110111010 = eye(N)(:,iq++) ; k110111011 = eye(N)(:,iq++) ;
k110111100 = eye(N)(:,iq++) ; k110111101 = eye(N)(:,iq++) ; k110111110 = eye(N)(:,iq++) ; k110111111 = eye(N)(:,iq++) ;
k111000000 = eye(N)(:,iq++) ; k111000001 = eye(N)(:,iq++) ; k111000010 = eye(N)(:,iq++) ; k111000011 = eye(N)(:,iq++) ;
k111000100 = eye(N)(:,iq++) ; k111000101 = eye(N)(:,iq++) ; k111000110 = eye(N)(:,iq++) ; k111000111 = eye(N)(:,iq++) ;
k111001000 = eye(N)(:,iq++) ; k111001001 = eye(N)(:,iq++) ; k111001010 = eye(N)(:,iq++) ; k111001011 = eye(N)(:,iq++) ;
k111001100 = eye(N)(:,iq++) ; k111001101 = eye(N)(:,iq++) ; k111001110 = eye(N)(:,iq++) ; k111001111 = eye(N)(:,iq++) ;
k111010000 = eye(N)(:,iq++) ; k111010001 = eye(N)(:,iq++) ; k111010010 = eye(N)(:,iq++) ; k111010011 = eye(N)(:,iq++) ;
k111010100 = eye(N)(:,iq++) ; k111010101 = eye(N)(:,iq++) ; k111010110 = eye(N)(:,iq++) ; k111010111 = eye(N)(:,iq++) ;
k111011000 = eye(N)(:,iq++) ; k111011001 = eye(N)(:,iq++) ; k111011010 = eye(N)(:,iq++) ; k111011011 = eye(N)(:,iq++) ;
k111011100 = eye(N)(:,iq++) ; k111011101 = eye(N)(:,iq++) ; k111011110 = eye(N)(:,iq++) ; k111011111 = eye(N)(:,iq++) ;
k111100000 = eye(N)(:,iq++) ; k111100001 = eye(N)(:,iq++) ; k111100010 = eye(N)(:,iq++) ; k111100011 = eye(N)(:,iq++) ;
k111100100 = eye(N)(:,iq++) ; k111100101 = eye(N)(:,iq++) ; k111100110 = eye(N)(:,iq++) ; k111100111 = eye(N)(:,iq++) ;
k111101000 = eye(N)(:,iq++) ; k111101001 = eye(N)(:,iq++) ; k111101010 = eye(N)(:,iq++) ; k111101011 = eye(N)(:,iq++) ;
k111101100 = eye(N)(:,iq++) ; k111101101 = eye(N)(:,iq++) ; k111101110 = eye(N)(:,iq++) ; k111101111 = eye(N)(:,iq++) ;
k111110000 = eye(N)(:,iq++) ; k111110001 = eye(N)(:,iq++) ; k111110010 = eye(N)(:,iq++) ; k111110011 = eye(N)(:,iq++) ;
k111110100 = eye(N)(:,iq++) ; k111110101 = eye(N)(:,iq++) ; k111110110 = eye(N)(:,iq++) ; k111110111 = eye(N)(:,iq++) ;
k111111000 = eye(N)(:,iq++) ; k111111001 = eye(N)(:,iq++) ; k111111010 = eye(N)(:,iq++) ; k111111011 = eye(N)(:,iq++) ;
k111111100 = eye(N)(:,iq++) ; k111111101 = eye(N)(:,iq++) ; k111111110 = eye(N)(:,iq++) ; k111111111 = eye(N)(:,iq++) ;



#--- 10 qubits:
Nq= 10 ;  N = 2^Nq; iq =1 ; 
k0000000000 = eye(N)(:,iq++) ; k0000000001 = eye(N)(:,iq++) ; k0000000010 = eye(N)(:,iq++) ; k0000000011 = eye(N)(:,iq++) ;
k0000000100 = eye(N)(:,iq++) ; k0000000101 = eye(N)(:,iq++) ; k0000000110 = eye(N)(:,iq++) ; k0000000111 = eye(N)(:,iq++) ;
k0000001000 = eye(N)(:,iq++) ; k0000001001 = eye(N)(:,iq++) ; k0000001010 = eye(N)(:,iq++) ; k0000001011 = eye(N)(:,iq++) ;
k0000001100 = eye(N)(:,iq++) ; k0000001101 = eye(N)(:,iq++) ; k0000001110 = eye(N)(:,iq++) ; k0000001111 = eye(N)(:,iq++) ;
k0000010000 = eye(N)(:,iq++) ; k0000010001 = eye(N)(:,iq++) ; k0000010010 = eye(N)(:,iq++) ; k0000010011 = eye(N)(:,iq++) ;
k0000010100 = eye(N)(:,iq++) ; k0000010101 = eye(N)(:,iq++) ; k0000010110 = eye(N)(:,iq++) ; k0000010111 = eye(N)(:,iq++) ;
k0000011000 = eye(N)(:,iq++) ; k0000011001 = eye(N)(:,iq++) ; k0000011010 = eye(N)(:,iq++) ; k0000011011 = eye(N)(:,iq++) ;
k0000011100 = eye(N)(:,iq++) ; k0000011101 = eye(N)(:,iq++) ; k0000011110 = eye(N)(:,iq++) ; k0000011111 = eye(N)(:,iq++) ;
k0000100000 = eye(N)(:,iq++) ; k0000100001 = eye(N)(:,iq++) ; k0000100010 = eye(N)(:,iq++) ; k0000100011 = eye(N)(:,iq++) ;
k0000100100 = eye(N)(:,iq++) ; k0000100101 = eye(N)(:,iq++) ; k0000100110 = eye(N)(:,iq++) ; k0000100111 = eye(N)(:,iq++) ;
k0000101000 = eye(N)(:,iq++) ; k0000101001 = eye(N)(:,iq++) ; k0000101010 = eye(N)(:,iq++) ; k0000101011 = eye(N)(:,iq++) ;
k0000101100 = eye(N)(:,iq++) ; k0000101101 = eye(N)(:,iq++) ; k0000101110 = eye(N)(:,iq++) ; k0000101111 = eye(N)(:,iq++) ;
k0000110000 = eye(N)(:,iq++) ; k0000110001 = eye(N)(:,iq++) ; k0000110010 = eye(N)(:,iq++) ; k0000110011 = eye(N)(:,iq++) ;
k0000110100 = eye(N)(:,iq++) ; k0000110101 = eye(N)(:,iq++) ; k0000110110 = eye(N)(:,iq++) ; k0000110111 = eye(N)(:,iq++) ;
k0000111000 = eye(N)(:,iq++) ; k0000111001 = eye(N)(:,iq++) ; k0000111010 = eye(N)(:,iq++) ; k0000111011 = eye(N)(:,iq++) ;
k0000111100 = eye(N)(:,iq++) ; k0000111101 = eye(N)(:,iq++) ; k0000111110 = eye(N)(:,iq++) ; k0000111111 = eye(N)(:,iq++) ;
k0001000000 = eye(N)(:,iq++) ; k0001000001 = eye(N)(:,iq++) ; k0001000010 = eye(N)(:,iq++) ; k0001000011 = eye(N)(:,iq++) ;
k0001000100 = eye(N)(:,iq++) ; k0001000101 = eye(N)(:,iq++) ; k0001000110 = eye(N)(:,iq++) ; k0001000111 = eye(N)(:,iq++) ;
k0001001000 = eye(N)(:,iq++) ; k0001001001 = eye(N)(:,iq++) ; k0001001010 = eye(N)(:,iq++) ; k0001001011 = eye(N)(:,iq++) ;
k0001001100 = eye(N)(:,iq++) ; k0001001101 = eye(N)(:,iq++) ; k0001001110 = eye(N)(:,iq++) ; k0001001111 = eye(N)(:,iq++) ;
k0001010000 = eye(N)(:,iq++) ; k0001010001 = eye(N)(:,iq++) ; k0001010010 = eye(N)(:,iq++) ; k0001010011 = eye(N)(:,iq++) ;
k0001010100 = eye(N)(:,iq++) ; k0001010101 = eye(N)(:,iq++) ; k0001010110 = eye(N)(:,iq++) ; k0001010111 = eye(N)(:,iq++) ;
k0001011000 = eye(N)(:,iq++) ; k0001011001 = eye(N)(:,iq++) ; k0001011010 = eye(N)(:,iq++) ; k0001011011 = eye(N)(:,iq++) ;
k0001011100 = eye(N)(:,iq++) ; k0001011101 = eye(N)(:,iq++) ; k0001011110 = eye(N)(:,iq++) ; k0001011111 = eye(N)(:,iq++) ;
k0001100000 = eye(N)(:,iq++) ; k0001100001 = eye(N)(:,iq++) ; k0001100010 = eye(N)(:,iq++) ; k0001100011 = eye(N)(:,iq++) ;
k0001100100 = eye(N)(:,iq++) ; k0001100101 = eye(N)(:,iq++) ; k0001100110 = eye(N)(:,iq++) ; k0001100111 = eye(N)(:,iq++) ;
k0001101000 = eye(N)(:,iq++) ; k0001101001 = eye(N)(:,iq++) ; k0001101010 = eye(N)(:,iq++) ; k0001101011 = eye(N)(:,iq++) ;
k0001101100 = eye(N)(:,iq++) ; k0001101101 = eye(N)(:,iq++) ; k0001101110 = eye(N)(:,iq++) ; k0001101111 = eye(N)(:,iq++) ;
k0001110000 = eye(N)(:,iq++) ; k0001110001 = eye(N)(:,iq++) ; k0001110010 = eye(N)(:,iq++) ; k0001110011 = eye(N)(:,iq++) ;
k0001110100 = eye(N)(:,iq++) ; k0001110101 = eye(N)(:,iq++) ; k0001110110 = eye(N)(:,iq++) ; k0001110111 = eye(N)(:,iq++) ;
k0001111000 = eye(N)(:,iq++) ; k0001111001 = eye(N)(:,iq++) ; k0001111010 = eye(N)(:,iq++) ; k0001111011 = eye(N)(:,iq++) ;
k0001111100 = eye(N)(:,iq++) ; k0001111101 = eye(N)(:,iq++) ; k0001111110 = eye(N)(:,iq++) ; k0001111111 = eye(N)(:,iq++) ;
k0010000000 = eye(N)(:,iq++) ; k0010000001 = eye(N)(:,iq++) ; k0010000010 = eye(N)(:,iq++) ; k0010000011 = eye(N)(:,iq++) ;
k0010000100 = eye(N)(:,iq++) ; k0010000101 = eye(N)(:,iq++) ; k0010000110 = eye(N)(:,iq++) ; k0010000111 = eye(N)(:,iq++) ;
k0010001000 = eye(N)(:,iq++) ; k0010001001 = eye(N)(:,iq++) ; k0010001010 = eye(N)(:,iq++) ; k0010001011 = eye(N)(:,iq++) ;
k0010001100 = eye(N)(:,iq++) ; k0010001101 = eye(N)(:,iq++) ; k0010001110 = eye(N)(:,iq++) ; k0010001111 = eye(N)(:,iq++) ;
k0010010000 = eye(N)(:,iq++) ; k0010010001 = eye(N)(:,iq++) ; k0010010010 = eye(N)(:,iq++) ; k0010010011 = eye(N)(:,iq++) ;
k0010010100 = eye(N)(:,iq++) ; k0010010101 = eye(N)(:,iq++) ; k0010010110 = eye(N)(:,iq++) ; k0010010111 = eye(N)(:,iq++) ;
k0010011000 = eye(N)(:,iq++) ; k0010011001 = eye(N)(:,iq++) ; k0010011010 = eye(N)(:,iq++) ; k0010011011 = eye(N)(:,iq++) ;
k0010011100 = eye(N)(:,iq++) ; k0010011101 = eye(N)(:,iq++) ; k0010011110 = eye(N)(:,iq++) ; k0010011111 = eye(N)(:,iq++) ;
k0010100000 = eye(N)(:,iq++) ; k0010100001 = eye(N)(:,iq++) ; k0010100010 = eye(N)(:,iq++) ; k0010100011 = eye(N)(:,iq++) ;
k0010100100 = eye(N)(:,iq++) ; k0010100101 = eye(N)(:,iq++) ; k0010100110 = eye(N)(:,iq++) ; k0010100111 = eye(N)(:,iq++) ;
k0010101000 = eye(N)(:,iq++) ; k0010101001 = eye(N)(:,iq++) ; k0010101010 = eye(N)(:,iq++) ; k0010101011 = eye(N)(:,iq++) ;
k0010101100 = eye(N)(:,iq++) ; k0010101101 = eye(N)(:,iq++) ; k0010101110 = eye(N)(:,iq++) ; k0010101111 = eye(N)(:,iq++) ;
k0010110000 = eye(N)(:,iq++) ; k0010110001 = eye(N)(:,iq++) ; k0010110010 = eye(N)(:,iq++) ; k0010110011 = eye(N)(:,iq++) ;
k0010110100 = eye(N)(:,iq++) ; k0010110101 = eye(N)(:,iq++) ; k0010110110 = eye(N)(:,iq++) ; k0010110111 = eye(N)(:,iq++) ;
k0010111000 = eye(N)(:,iq++) ; k0010111001 = eye(N)(:,iq++) ; k0010111010 = eye(N)(:,iq++) ; k0010111011 = eye(N)(:,iq++) ;
k0010111100 = eye(N)(:,iq++) ; k0010111101 = eye(N)(:,iq++) ; k0010111110 = eye(N)(:,iq++) ; k0010111111 = eye(N)(:,iq++) ;
k0011000000 = eye(N)(:,iq++) ; k0011000001 = eye(N)(:,iq++) ; k0011000010 = eye(N)(:,iq++) ; k0011000011 = eye(N)(:,iq++) ;
k0011000100 = eye(N)(:,iq++) ; k0011000101 = eye(N)(:,iq++) ; k0011000110 = eye(N)(:,iq++) ; k0011000111 = eye(N)(:,iq++) ;
k0011001000 = eye(N)(:,iq++) ; k0011001001 = eye(N)(:,iq++) ; k0011001010 = eye(N)(:,iq++) ; k0011001011 = eye(N)(:,iq++) ;
k0011001100 = eye(N)(:,iq++) ; k0011001101 = eye(N)(:,iq++) ; k0011001110 = eye(N)(:,iq++) ; k0011001111 = eye(N)(:,iq++) ;
k0011010000 = eye(N)(:,iq++) ; k0011010001 = eye(N)(:,iq++) ; k0011010010 = eye(N)(:,iq++) ; k0011010011 = eye(N)(:,iq++) ;
k0011010100 = eye(N)(:,iq++) ; k0011010101 = eye(N)(:,iq++) ; k0011010110 = eye(N)(:,iq++) ; k0011010111 = eye(N)(:,iq++) ;
k0011011000 = eye(N)(:,iq++) ; k0011011001 = eye(N)(:,iq++) ; k0011011010 = eye(N)(:,iq++) ; k0011011011 = eye(N)(:,iq++) ;
k0011011100 = eye(N)(:,iq++) ; k0011011101 = eye(N)(:,iq++) ; k0011011110 = eye(N)(:,iq++) ; k0011011111 = eye(N)(:,iq++) ;
k0011100000 = eye(N)(:,iq++) ; k0011100001 = eye(N)(:,iq++) ; k0011100010 = eye(N)(:,iq++) ; k0011100011 = eye(N)(:,iq++) ;
k0011100100 = eye(N)(:,iq++) ; k0011100101 = eye(N)(:,iq++) ; k0011100110 = eye(N)(:,iq++) ; k0011100111 = eye(N)(:,iq++) ;
k0011101000 = eye(N)(:,iq++) ; k0011101001 = eye(N)(:,iq++) ; k0011101010 = eye(N)(:,iq++) ; k0011101011 = eye(N)(:,iq++) ;
k0011101100 = eye(N)(:,iq++) ; k0011101101 = eye(N)(:,iq++) ; k0011101110 = eye(N)(:,iq++) ; k0011101111 = eye(N)(:,iq++) ;
k0011110000 = eye(N)(:,iq++) ; k0011110001 = eye(N)(:,iq++) ; k0011110010 = eye(N)(:,iq++) ; k0011110011 = eye(N)(:,iq++) ;
k0011110100 = eye(N)(:,iq++) ; k0011110101 = eye(N)(:,iq++) ; k0011110110 = eye(N)(:,iq++) ; k0011110111 = eye(N)(:,iq++) ;
k0011111000 = eye(N)(:,iq++) ; k0011111001 = eye(N)(:,iq++) ; k0011111010 = eye(N)(:,iq++) ; k0011111011 = eye(N)(:,iq++) ;
k0011111100 = eye(N)(:,iq++) ; k0011111101 = eye(N)(:,iq++) ; k0011111110 = eye(N)(:,iq++) ; k0011111111 = eye(N)(:,iq++) ;
k0100000000 = eye(N)(:,iq++) ; k0100000001 = eye(N)(:,iq++) ; k0100000010 = eye(N)(:,iq++) ; k0100000011 = eye(N)(:,iq++) ;
k0100000100 = eye(N)(:,iq++) ; k0100000101 = eye(N)(:,iq++) ; k0100000110 = eye(N)(:,iq++) ; k0100000111 = eye(N)(:,iq++) ;
k0100001000 = eye(N)(:,iq++) ; k0100001001 = eye(N)(:,iq++) ; k0100001010 = eye(N)(:,iq++) ; k0100001011 = eye(N)(:,iq++) ;
k0100001100 = eye(N)(:,iq++) ; k0100001101 = eye(N)(:,iq++) ; k0100001110 = eye(N)(:,iq++) ; k0100001111 = eye(N)(:,iq++) ;
k0100010000 = eye(N)(:,iq++) ; k0100010001 = eye(N)(:,iq++) ; k0100010010 = eye(N)(:,iq++) ; k0100010011 = eye(N)(:,iq++) ;
k0100010100 = eye(N)(:,iq++) ; k0100010101 = eye(N)(:,iq++) ; k0100010110 = eye(N)(:,iq++) ; k0100010111 = eye(N)(:,iq++) ;
k0100011000 = eye(N)(:,iq++) ; k0100011001 = eye(N)(:,iq++) ; k0100011010 = eye(N)(:,iq++) ; k0100011011 = eye(N)(:,iq++) ;
k0100011100 = eye(N)(:,iq++) ; k0100011101 = eye(N)(:,iq++) ; k0100011110 = eye(N)(:,iq++) ; k0100011111 = eye(N)(:,iq++) ;
k0100100000 = eye(N)(:,iq++) ; k0100100001 = eye(N)(:,iq++) ; k0100100010 = eye(N)(:,iq++) ; k0100100011 = eye(N)(:,iq++) ;
k0100100100 = eye(N)(:,iq++) ; k0100100101 = eye(N)(:,iq++) ; k0100100110 = eye(N)(:,iq++) ; k0100100111 = eye(N)(:,iq++) ;
k0100101000 = eye(N)(:,iq++) ; k0100101001 = eye(N)(:,iq++) ; k0100101010 = eye(N)(:,iq++) ; k0100101011 = eye(N)(:,iq++) ;
k0100101100 = eye(N)(:,iq++) ; k0100101101 = eye(N)(:,iq++) ; k0100101110 = eye(N)(:,iq++) ; k0100101111 = eye(N)(:,iq++) ;
k0100110000 = eye(N)(:,iq++) ; k0100110001 = eye(N)(:,iq++) ; k0100110010 = eye(N)(:,iq++) ; k0100110011 = eye(N)(:,iq++) ;
k0100110100 = eye(N)(:,iq++) ; k0100110101 = eye(N)(:,iq++) ; k0100110110 = eye(N)(:,iq++) ; k0100110111 = eye(N)(:,iq++) ;
k0100111000 = eye(N)(:,iq++) ; k0100111001 = eye(N)(:,iq++) ; k0100111010 = eye(N)(:,iq++) ; k0100111011 = eye(N)(:,iq++) ;
k0100111100 = eye(N)(:,iq++) ; k0100111101 = eye(N)(:,iq++) ; k0100111110 = eye(N)(:,iq++) ; k0100111111 = eye(N)(:,iq++) ;
k0101000000 = eye(N)(:,iq++) ; k0101000001 = eye(N)(:,iq++) ; k0101000010 = eye(N)(:,iq++) ; k0101000011 = eye(N)(:,iq++) ;
k0101000100 = eye(N)(:,iq++) ; k0101000101 = eye(N)(:,iq++) ; k0101000110 = eye(N)(:,iq++) ; k0101000111 = eye(N)(:,iq++) ;
k0101001000 = eye(N)(:,iq++) ; k0101001001 = eye(N)(:,iq++) ; k0101001010 = eye(N)(:,iq++) ; k0101001011 = eye(N)(:,iq++) ;
k0101001100 = eye(N)(:,iq++) ; k0101001101 = eye(N)(:,iq++) ; k0101001110 = eye(N)(:,iq++) ; k0101001111 = eye(N)(:,iq++) ;
k0101010000 = eye(N)(:,iq++) ; k0101010001 = eye(N)(:,iq++) ; k0101010010 = eye(N)(:,iq++) ; k0101010011 = eye(N)(:,iq++) ;
k0101010100 = eye(N)(:,iq++) ; k0101010101 = eye(N)(:,iq++) ; k0101010110 = eye(N)(:,iq++) ; k0101010111 = eye(N)(:,iq++) ;
k0101011000 = eye(N)(:,iq++) ; k0101011001 = eye(N)(:,iq++) ; k0101011010 = eye(N)(:,iq++) ; k0101011011 = eye(N)(:,iq++) ;
k0101011100 = eye(N)(:,iq++) ; k0101011101 = eye(N)(:,iq++) ; k0101011110 = eye(N)(:,iq++) ; k0101011111 = eye(N)(:,iq++) ;
k0101100000 = eye(N)(:,iq++) ; k0101100001 = eye(N)(:,iq++) ; k0101100010 = eye(N)(:,iq++) ; k0101100011 = eye(N)(:,iq++) ;
k0101100100 = eye(N)(:,iq++) ; k0101100101 = eye(N)(:,iq++) ; k0101100110 = eye(N)(:,iq++) ; k0101100111 = eye(N)(:,iq++) ;
k0101101000 = eye(N)(:,iq++) ; k0101101001 = eye(N)(:,iq++) ; k0101101010 = eye(N)(:,iq++) ; k0101101011 = eye(N)(:,iq++) ;
k0101101100 = eye(N)(:,iq++) ; k0101101101 = eye(N)(:,iq++) ; k0101101110 = eye(N)(:,iq++) ; k0101101111 = eye(N)(:,iq++) ;
k0101110000 = eye(N)(:,iq++) ; k0101110001 = eye(N)(:,iq++) ; k0101110010 = eye(N)(:,iq++) ; k0101110011 = eye(N)(:,iq++) ;
k0101110100 = eye(N)(:,iq++) ; k0101110101 = eye(N)(:,iq++) ; k0101110110 = eye(N)(:,iq++) ; k0101110111 = eye(N)(:,iq++) ;
k0101111000 = eye(N)(:,iq++) ; k0101111001 = eye(N)(:,iq++) ; k0101111010 = eye(N)(:,iq++) ; k0101111011 = eye(N)(:,iq++) ;
k0101111100 = eye(N)(:,iq++) ; k0101111101 = eye(N)(:,iq++) ; k0101111110 = eye(N)(:,iq++) ; k0101111111 = eye(N)(:,iq++) ;
k0110000000 = eye(N)(:,iq++) ; k0110000001 = eye(N)(:,iq++) ; k0110000010 = eye(N)(:,iq++) ; k0110000011 = eye(N)(:,iq++) ;
k0110000100 = eye(N)(:,iq++) ; k0110000101 = eye(N)(:,iq++) ; k0110000110 = eye(N)(:,iq++) ; k0110000111 = eye(N)(:,iq++) ;
k0110001000 = eye(N)(:,iq++) ; k0110001001 = eye(N)(:,iq++) ; k0110001010 = eye(N)(:,iq++) ; k0110001011 = eye(N)(:,iq++) ;
k0110001100 = eye(N)(:,iq++) ; k0110001101 = eye(N)(:,iq++) ; k0110001110 = eye(N)(:,iq++) ; k0110001111 = eye(N)(:,iq++) ;
k0110010000 = eye(N)(:,iq++) ; k0110010001 = eye(N)(:,iq++) ; k0110010010 = eye(N)(:,iq++) ; k0110010011 = eye(N)(:,iq++) ;
k0110010100 = eye(N)(:,iq++) ; k0110010101 = eye(N)(:,iq++) ; k0110010110 = eye(N)(:,iq++) ; k0110010111 = eye(N)(:,iq++) ;
k0110011000 = eye(N)(:,iq++) ; k0110011001 = eye(N)(:,iq++) ; k0110011010 = eye(N)(:,iq++) ; k0110011011 = eye(N)(:,iq++) ;
k0110011100 = eye(N)(:,iq++) ; k0110011101 = eye(N)(:,iq++) ; k0110011110 = eye(N)(:,iq++) ; k0110011111 = eye(N)(:,iq++) ;
k0110100000 = eye(N)(:,iq++) ; k0110100001 = eye(N)(:,iq++) ; k0110100010 = eye(N)(:,iq++) ; k0110100011 = eye(N)(:,iq++) ;
k0110100100 = eye(N)(:,iq++) ; k0110100101 = eye(N)(:,iq++) ; k0110100110 = eye(N)(:,iq++) ; k0110100111 = eye(N)(:,iq++) ;
k0110101000 = eye(N)(:,iq++) ; k0110101001 = eye(N)(:,iq++) ; k0110101010 = eye(N)(:,iq++) ; k0110101011 = eye(N)(:,iq++) ;
k0110101100 = eye(N)(:,iq++) ; k0110101101 = eye(N)(:,iq++) ; k0110101110 = eye(N)(:,iq++) ; k0110101111 = eye(N)(:,iq++) ;
k0110110000 = eye(N)(:,iq++) ; k0110110001 = eye(N)(:,iq++) ; k0110110010 = eye(N)(:,iq++) ; k0110110011 = eye(N)(:,iq++) ;
k0110110100 = eye(N)(:,iq++) ; k0110110101 = eye(N)(:,iq++) ; k0110110110 = eye(N)(:,iq++) ; k0110110111 = eye(N)(:,iq++) ;
k0110111000 = eye(N)(:,iq++) ; k0110111001 = eye(N)(:,iq++) ; k0110111010 = eye(N)(:,iq++) ; k0110111011 = eye(N)(:,iq++) ;
k0110111100 = eye(N)(:,iq++) ; k0110111101 = eye(N)(:,iq++) ; k0110111110 = eye(N)(:,iq++) ; k0110111111 = eye(N)(:,iq++) ;
k0111000000 = eye(N)(:,iq++) ; k0111000001 = eye(N)(:,iq++) ; k0111000010 = eye(N)(:,iq++) ; k0111000011 = eye(N)(:,iq++) ;
k0111000100 = eye(N)(:,iq++) ; k0111000101 = eye(N)(:,iq++) ; k0111000110 = eye(N)(:,iq++) ; k0111000111 = eye(N)(:,iq++) ;
k0111001000 = eye(N)(:,iq++) ; k0111001001 = eye(N)(:,iq++) ; k0111001010 = eye(N)(:,iq++) ; k0111001011 = eye(N)(:,iq++) ;
k0111001100 = eye(N)(:,iq++) ; k0111001101 = eye(N)(:,iq++) ; k0111001110 = eye(N)(:,iq++) ; k0111001111 = eye(N)(:,iq++) ;
k0111010000 = eye(N)(:,iq++) ; k0111010001 = eye(N)(:,iq++) ; k0111010010 = eye(N)(:,iq++) ; k0111010011 = eye(N)(:,iq++) ;
k0111010100 = eye(N)(:,iq++) ; k0111010101 = eye(N)(:,iq++) ; k0111010110 = eye(N)(:,iq++) ; k0111010111 = eye(N)(:,iq++) ;
k0111011000 = eye(N)(:,iq++) ; k0111011001 = eye(N)(:,iq++) ; k0111011010 = eye(N)(:,iq++) ; k0111011011 = eye(N)(:,iq++) ;
k0111011100 = eye(N)(:,iq++) ; k0111011101 = eye(N)(:,iq++) ; k0111011110 = eye(N)(:,iq++) ; k0111011111 = eye(N)(:,iq++) ;
k0111100000 = eye(N)(:,iq++) ; k0111100001 = eye(N)(:,iq++) ; k0111100010 = eye(N)(:,iq++) ; k0111100011 = eye(N)(:,iq++) ;
k0111100100 = eye(N)(:,iq++) ; k0111100101 = eye(N)(:,iq++) ; k0111100110 = eye(N)(:,iq++) ; k0111100111 = eye(N)(:,iq++) ;
k0111101000 = eye(N)(:,iq++) ; k0111101001 = eye(N)(:,iq++) ; k0111101010 = eye(N)(:,iq++) ; k0111101011 = eye(N)(:,iq++) ;
k0111101100 = eye(N)(:,iq++) ; k0111101101 = eye(N)(:,iq++) ; k0111101110 = eye(N)(:,iq++) ; k0111101111 = eye(N)(:,iq++) ;
k0111110000 = eye(N)(:,iq++) ; k0111110001 = eye(N)(:,iq++) ; k0111110010 = eye(N)(:,iq++) ; k0111110011 = eye(N)(:,iq++) ;
k0111110100 = eye(N)(:,iq++) ; k0111110101 = eye(N)(:,iq++) ; k0111110110 = eye(N)(:,iq++) ; k0111110111 = eye(N)(:,iq++) ;
k0111111000 = eye(N)(:,iq++) ; k0111111001 = eye(N)(:,iq++) ; k0111111010 = eye(N)(:,iq++) ; k0111111011 = eye(N)(:,iq++) ;
k0111111100 = eye(N)(:,iq++) ; k0111111101 = eye(N)(:,iq++) ; k0111111110 = eye(N)(:,iq++) ; k0111111111 = eye(N)(:,iq++) ;
k1000000000 = eye(N)(:,iq++) ; k1000000001 = eye(N)(:,iq++) ; k1000000010 = eye(N)(:,iq++) ; k1000000011 = eye(N)(:,iq++) ;
k1000000100 = eye(N)(:,iq++) ; k1000000101 = eye(N)(:,iq++) ; k1000000110 = eye(N)(:,iq++) ; k1000000111 = eye(N)(:,iq++) ;
k1000001000 = eye(N)(:,iq++) ; k1000001001 = eye(N)(:,iq++) ; k1000001010 = eye(N)(:,iq++) ; k1000001011 = eye(N)(:,iq++) ;
k1000001100 = eye(N)(:,iq++) ; k1000001101 = eye(N)(:,iq++) ; k1000001110 = eye(N)(:,iq++) ; k1000001111 = eye(N)(:,iq++) ;
k1000010000 = eye(N)(:,iq++) ; k1000010001 = eye(N)(:,iq++) ; k1000010010 = eye(N)(:,iq++) ; k1000010011 = eye(N)(:,iq++) ;
k1000010100 = eye(N)(:,iq++) ; k1000010101 = eye(N)(:,iq++) ; k1000010110 = eye(N)(:,iq++) ; k1000010111 = eye(N)(:,iq++) ;
k1000011000 = eye(N)(:,iq++) ; k1000011001 = eye(N)(:,iq++) ; k1000011010 = eye(N)(:,iq++) ; k1000011011 = eye(N)(:,iq++) ;
k1000011100 = eye(N)(:,iq++) ; k1000011101 = eye(N)(:,iq++) ; k1000011110 = eye(N)(:,iq++) ; k1000011111 = eye(N)(:,iq++) ;
k1000100000 = eye(N)(:,iq++) ; k1000100001 = eye(N)(:,iq++) ; k1000100010 = eye(N)(:,iq++) ; k1000100011 = eye(N)(:,iq++) ;
k1000100100 = eye(N)(:,iq++) ; k1000100101 = eye(N)(:,iq++) ; k1000100110 = eye(N)(:,iq++) ; k1000100111 = eye(N)(:,iq++) ;
k1000101000 = eye(N)(:,iq++) ; k1000101001 = eye(N)(:,iq++) ; k1000101010 = eye(N)(:,iq++) ; k1000101011 = eye(N)(:,iq++) ;
k1000101100 = eye(N)(:,iq++) ; k1000101101 = eye(N)(:,iq++) ; k1000101110 = eye(N)(:,iq++) ; k1000101111 = eye(N)(:,iq++) ;
k1000110000 = eye(N)(:,iq++) ; k1000110001 = eye(N)(:,iq++) ; k1000110010 = eye(N)(:,iq++) ; k1000110011 = eye(N)(:,iq++) ;
k1000110100 = eye(N)(:,iq++) ; k1000110101 = eye(N)(:,iq++) ; k1000110110 = eye(N)(:,iq++) ; k1000110111 = eye(N)(:,iq++) ;
k1000111000 = eye(N)(:,iq++) ; k1000111001 = eye(N)(:,iq++) ; k1000111010 = eye(N)(:,iq++) ; k1000111011 = eye(N)(:,iq++) ;
k1000111100 = eye(N)(:,iq++) ; k1000111101 = eye(N)(:,iq++) ; k1000111110 = eye(N)(:,iq++) ; k1000111111 = eye(N)(:,iq++) ;
k1001000000 = eye(N)(:,iq++) ; k1001000001 = eye(N)(:,iq++) ; k1001000010 = eye(N)(:,iq++) ; k1001000011 = eye(N)(:,iq++) ;
k1001000100 = eye(N)(:,iq++) ; k1001000101 = eye(N)(:,iq++) ; k1001000110 = eye(N)(:,iq++) ; k1001000111 = eye(N)(:,iq++) ;
k1001001000 = eye(N)(:,iq++) ; k1001001001 = eye(N)(:,iq++) ; k1001001010 = eye(N)(:,iq++) ; k1001001011 = eye(N)(:,iq++) ;
k1001001100 = eye(N)(:,iq++) ; k1001001101 = eye(N)(:,iq++) ; k1001001110 = eye(N)(:,iq++) ; k1001001111 = eye(N)(:,iq++) ;
k1001010000 = eye(N)(:,iq++) ; k1001010001 = eye(N)(:,iq++) ; k1001010010 = eye(N)(:,iq++) ; k1001010011 = eye(N)(:,iq++) ;
k1001010100 = eye(N)(:,iq++) ; k1001010101 = eye(N)(:,iq++) ; k1001010110 = eye(N)(:,iq++) ; k1001010111 = eye(N)(:,iq++) ;
k1001011000 = eye(N)(:,iq++) ; k1001011001 = eye(N)(:,iq++) ; k1001011010 = eye(N)(:,iq++) ; k1001011011 = eye(N)(:,iq++) ;
k1001011100 = eye(N)(:,iq++) ; k1001011101 = eye(N)(:,iq++) ; k1001011110 = eye(N)(:,iq++) ; k1001011111 = eye(N)(:,iq++) ;
k1001100000 = eye(N)(:,iq++) ; k1001100001 = eye(N)(:,iq++) ; k1001100010 = eye(N)(:,iq++) ; k1001100011 = eye(N)(:,iq++) ;
k1001100100 = eye(N)(:,iq++) ; k1001100101 = eye(N)(:,iq++) ; k1001100110 = eye(N)(:,iq++) ; k1001100111 = eye(N)(:,iq++) ;
k1001101000 = eye(N)(:,iq++) ; k1001101001 = eye(N)(:,iq++) ; k1001101010 = eye(N)(:,iq++) ; k1001101011 = eye(N)(:,iq++) ;
k1001101100 = eye(N)(:,iq++) ; k1001101101 = eye(N)(:,iq++) ; k1001101110 = eye(N)(:,iq++) ; k1001101111 = eye(N)(:,iq++) ;
k1001110000 = eye(N)(:,iq++) ; k1001110001 = eye(N)(:,iq++) ; k1001110010 = eye(N)(:,iq++) ; k1001110011 = eye(N)(:,iq++) ;
k1001110100 = eye(N)(:,iq++) ; k1001110101 = eye(N)(:,iq++) ; k1001110110 = eye(N)(:,iq++) ; k1001110111 = eye(N)(:,iq++) ;
k1001111000 = eye(N)(:,iq++) ; k1001111001 = eye(N)(:,iq++) ; k1001111010 = eye(N)(:,iq++) ; k1001111011 = eye(N)(:,iq++) ;
k1001111100 = eye(N)(:,iq++) ; k1001111101 = eye(N)(:,iq++) ; k1001111110 = eye(N)(:,iq++) ; k1001111111 = eye(N)(:,iq++) ;
k1010000000 = eye(N)(:,iq++) ; k1010000001 = eye(N)(:,iq++) ; k1010000010 = eye(N)(:,iq++) ; k1010000011 = eye(N)(:,iq++) ;
k1010000100 = eye(N)(:,iq++) ; k1010000101 = eye(N)(:,iq++) ; k1010000110 = eye(N)(:,iq++) ; k1010000111 = eye(N)(:,iq++) ;
k1010001000 = eye(N)(:,iq++) ; k1010001001 = eye(N)(:,iq++) ; k1010001010 = eye(N)(:,iq++) ; k1010001011 = eye(N)(:,iq++) ;
k1010001100 = eye(N)(:,iq++) ; k1010001101 = eye(N)(:,iq++) ; k1010001110 = eye(N)(:,iq++) ; k1010001111 = eye(N)(:,iq++) ;
k1010010000 = eye(N)(:,iq++) ; k1010010001 = eye(N)(:,iq++) ; k1010010010 = eye(N)(:,iq++) ; k1010010011 = eye(N)(:,iq++) ;
k1010010100 = eye(N)(:,iq++) ; k1010010101 = eye(N)(:,iq++) ; k1010010110 = eye(N)(:,iq++) ; k1010010111 = eye(N)(:,iq++) ;
k1010011000 = eye(N)(:,iq++) ; k1010011001 = eye(N)(:,iq++) ; k1010011010 = eye(N)(:,iq++) ; k1010011011 = eye(N)(:,iq++) ;
k1010011100 = eye(N)(:,iq++) ; k1010011101 = eye(N)(:,iq++) ; k1010011110 = eye(N)(:,iq++) ; k1010011111 = eye(N)(:,iq++) ;
k1010100000 = eye(N)(:,iq++) ; k1010100001 = eye(N)(:,iq++) ; k1010100010 = eye(N)(:,iq++) ; k1010100011 = eye(N)(:,iq++) ;
k1010100100 = eye(N)(:,iq++) ; k1010100101 = eye(N)(:,iq++) ; k1010100110 = eye(N)(:,iq++) ; k1010100111 = eye(N)(:,iq++) ;
k1010101000 = eye(N)(:,iq++) ; k1010101001 = eye(N)(:,iq++) ; k1010101010 = eye(N)(:,iq++) ; k1010101011 = eye(N)(:,iq++) ;
k1010101100 = eye(N)(:,iq++) ; k1010101101 = eye(N)(:,iq++) ; k1010101110 = eye(N)(:,iq++) ; k1010101111 = eye(N)(:,iq++) ;
k1010110000 = eye(N)(:,iq++) ; k1010110001 = eye(N)(:,iq++) ; k1010110010 = eye(N)(:,iq++) ; k1010110011 = eye(N)(:,iq++) ;
k1010110100 = eye(N)(:,iq++) ; k1010110101 = eye(N)(:,iq++) ; k1010110110 = eye(N)(:,iq++) ; k1010110111 = eye(N)(:,iq++) ;
k1010111000 = eye(N)(:,iq++) ; k1010111001 = eye(N)(:,iq++) ; k1010111010 = eye(N)(:,iq++) ; k1010111011 = eye(N)(:,iq++) ;
k1010111100 = eye(N)(:,iq++) ; k1010111101 = eye(N)(:,iq++) ; k1010111110 = eye(N)(:,iq++) ; k1010111111 = eye(N)(:,iq++) ;
k1011000000 = eye(N)(:,iq++) ; k1011000001 = eye(N)(:,iq++) ; k1011000010 = eye(N)(:,iq++) ; k1011000011 = eye(N)(:,iq++) ;
k1011000100 = eye(N)(:,iq++) ; k1011000101 = eye(N)(:,iq++) ; k1011000110 = eye(N)(:,iq++) ; k1011000111 = eye(N)(:,iq++) ;
k1011001000 = eye(N)(:,iq++) ; k1011001001 = eye(N)(:,iq++) ; k1011001010 = eye(N)(:,iq++) ; k1011001011 = eye(N)(:,iq++) ;
k1011001100 = eye(N)(:,iq++) ; k1011001101 = eye(N)(:,iq++) ; k1011001110 = eye(N)(:,iq++) ; k1011001111 = eye(N)(:,iq++) ;
k1011010000 = eye(N)(:,iq++) ; k1011010001 = eye(N)(:,iq++) ; k1011010010 = eye(N)(:,iq++) ; k1011010011 = eye(N)(:,iq++) ;
k1011010100 = eye(N)(:,iq++) ; k1011010101 = eye(N)(:,iq++) ; k1011010110 = eye(N)(:,iq++) ; k1011010111 = eye(N)(:,iq++) ;
k1011011000 = eye(N)(:,iq++) ; k1011011001 = eye(N)(:,iq++) ; k1011011010 = eye(N)(:,iq++) ; k1011011011 = eye(N)(:,iq++) ;
k1011011100 = eye(N)(:,iq++) ; k1011011101 = eye(N)(:,iq++) ; k1011011110 = eye(N)(:,iq++) ; k1011011111 = eye(N)(:,iq++) ;
k1011100000 = eye(N)(:,iq++) ; k1011100001 = eye(N)(:,iq++) ; k1011100010 = eye(N)(:,iq++) ; k1011100011 = eye(N)(:,iq++) ;
k1011100100 = eye(N)(:,iq++) ; k1011100101 = eye(N)(:,iq++) ; k1011100110 = eye(N)(:,iq++) ; k1011100111 = eye(N)(:,iq++) ;
k1011101000 = eye(N)(:,iq++) ; k1011101001 = eye(N)(:,iq++) ; k1011101010 = eye(N)(:,iq++) ; k1011101011 = eye(N)(:,iq++) ;
k1011101100 = eye(N)(:,iq++) ; k1011101101 = eye(N)(:,iq++) ; k1011101110 = eye(N)(:,iq++) ; k1011101111 = eye(N)(:,iq++) ;
k1011110000 = eye(N)(:,iq++) ; k1011110001 = eye(N)(:,iq++) ; k1011110010 = eye(N)(:,iq++) ; k1011110011 = eye(N)(:,iq++) ;
k1011110100 = eye(N)(:,iq++) ; k1011110101 = eye(N)(:,iq++) ; k1011110110 = eye(N)(:,iq++) ; k1011110111 = eye(N)(:,iq++) ;
k1011111000 = eye(N)(:,iq++) ; k1011111001 = eye(N)(:,iq++) ; k1011111010 = eye(N)(:,iq++) ; k1011111011 = eye(N)(:,iq++) ;
k1011111100 = eye(N)(:,iq++) ; k1011111101 = eye(N)(:,iq++) ; k1011111110 = eye(N)(:,iq++) ; k1011111111 = eye(N)(:,iq++) ;
k1100000000 = eye(N)(:,iq++) ; k1100000001 = eye(N)(:,iq++) ; k1100000010 = eye(N)(:,iq++) ; k1100000011 = eye(N)(:,iq++) ;
k1100000100 = eye(N)(:,iq++) ; k1100000101 = eye(N)(:,iq++) ; k1100000110 = eye(N)(:,iq++) ; k1100000111 = eye(N)(:,iq++) ;
k1100001000 = eye(N)(:,iq++) ; k1100001001 = eye(N)(:,iq++) ; k1100001010 = eye(N)(:,iq++) ; k1100001011 = eye(N)(:,iq++) ;
k1100001100 = eye(N)(:,iq++) ; k1100001101 = eye(N)(:,iq++) ; k1100001110 = eye(N)(:,iq++) ; k1100001111 = eye(N)(:,iq++) ;
k1100010000 = eye(N)(:,iq++) ; k1100010001 = eye(N)(:,iq++) ; k1100010010 = eye(N)(:,iq++) ; k1100010011 = eye(N)(:,iq++) ;
k1100010100 = eye(N)(:,iq++) ; k1100010101 = eye(N)(:,iq++) ; k1100010110 = eye(N)(:,iq++) ; k1100010111 = eye(N)(:,iq++) ;
k1100011000 = eye(N)(:,iq++) ; k1100011001 = eye(N)(:,iq++) ; k1100011010 = eye(N)(:,iq++) ; k1100011011 = eye(N)(:,iq++) ;
k1100011100 = eye(N)(:,iq++) ; k1100011101 = eye(N)(:,iq++) ; k1100011110 = eye(N)(:,iq++) ; k1100011111 = eye(N)(:,iq++) ;
k1100100000 = eye(N)(:,iq++) ; k1100100001 = eye(N)(:,iq++) ; k1100100010 = eye(N)(:,iq++) ; k1100100011 = eye(N)(:,iq++) ;
k1100100100 = eye(N)(:,iq++) ; k1100100101 = eye(N)(:,iq++) ; k1100100110 = eye(N)(:,iq++) ; k1100100111 = eye(N)(:,iq++) ;
k1100101000 = eye(N)(:,iq++) ; k1100101001 = eye(N)(:,iq++) ; k1100101010 = eye(N)(:,iq++) ; k1100101011 = eye(N)(:,iq++) ;
k1100101100 = eye(N)(:,iq++) ; k1100101101 = eye(N)(:,iq++) ; k1100101110 = eye(N)(:,iq++) ; k1100101111 = eye(N)(:,iq++) ;
k1100110000 = eye(N)(:,iq++) ; k1100110001 = eye(N)(:,iq++) ; k1100110010 = eye(N)(:,iq++) ; k1100110011 = eye(N)(:,iq++) ;
k1100110100 = eye(N)(:,iq++) ; k1100110101 = eye(N)(:,iq++) ; k1100110110 = eye(N)(:,iq++) ; k1100110111 = eye(N)(:,iq++) ;
k1100111000 = eye(N)(:,iq++) ; k1100111001 = eye(N)(:,iq++) ; k1100111010 = eye(N)(:,iq++) ; k1100111011 = eye(N)(:,iq++) ;
k1100111100 = eye(N)(:,iq++) ; k1100111101 = eye(N)(:,iq++) ; k1100111110 = eye(N)(:,iq++) ; k1100111111 = eye(N)(:,iq++) ;
k1101000000 = eye(N)(:,iq++) ; k1101000001 = eye(N)(:,iq++) ; k1101000010 = eye(N)(:,iq++) ; k1101000011 = eye(N)(:,iq++) ;
k1101000100 = eye(N)(:,iq++) ; k1101000101 = eye(N)(:,iq++) ; k1101000110 = eye(N)(:,iq++) ; k1101000111 = eye(N)(:,iq++) ;
k1101001000 = eye(N)(:,iq++) ; k1101001001 = eye(N)(:,iq++) ; k1101001010 = eye(N)(:,iq++) ; k1101001011 = eye(N)(:,iq++) ;
k1101001100 = eye(N)(:,iq++) ; k1101001101 = eye(N)(:,iq++) ; k1101001110 = eye(N)(:,iq++) ; k1101001111 = eye(N)(:,iq++) ;
k1101010000 = eye(N)(:,iq++) ; k1101010001 = eye(N)(:,iq++) ; k1101010010 = eye(N)(:,iq++) ; k1101010011 = eye(N)(:,iq++) ;
k1101010100 = eye(N)(:,iq++) ; k1101010101 = eye(N)(:,iq++) ; k1101010110 = eye(N)(:,iq++) ; k1101010111 = eye(N)(:,iq++) ;
k1101011000 = eye(N)(:,iq++) ; k1101011001 = eye(N)(:,iq++) ; k1101011010 = eye(N)(:,iq++) ; k1101011011 = eye(N)(:,iq++) ;
k1101011100 = eye(N)(:,iq++) ; k1101011101 = eye(N)(:,iq++) ; k1101011110 = eye(N)(:,iq++) ; k1101011111 = eye(N)(:,iq++) ;
k1101100000 = eye(N)(:,iq++) ; k1101100001 = eye(N)(:,iq++) ; k1101100010 = eye(N)(:,iq++) ; k1101100011 = eye(N)(:,iq++) ;
k1101100100 = eye(N)(:,iq++) ; k1101100101 = eye(N)(:,iq++) ; k1101100110 = eye(N)(:,iq++) ; k1101100111 = eye(N)(:,iq++) ;
k1101101000 = eye(N)(:,iq++) ; k1101101001 = eye(N)(:,iq++) ; k1101101010 = eye(N)(:,iq++) ; k1101101011 = eye(N)(:,iq++) ;
k1101101100 = eye(N)(:,iq++) ; k1101101101 = eye(N)(:,iq++) ; k1101101110 = eye(N)(:,iq++) ; k1101101111 = eye(N)(:,iq++) ;
k1101110000 = eye(N)(:,iq++) ; k1101110001 = eye(N)(:,iq++) ; k1101110010 = eye(N)(:,iq++) ; k1101110011 = eye(N)(:,iq++) ;
k1101110100 = eye(N)(:,iq++) ; k1101110101 = eye(N)(:,iq++) ; k1101110110 = eye(N)(:,iq++) ; k1101110111 = eye(N)(:,iq++) ;
k1101111000 = eye(N)(:,iq++) ; k1101111001 = eye(N)(:,iq++) ; k1101111010 = eye(N)(:,iq++) ; k1101111011 = eye(N)(:,iq++) ;
k1101111100 = eye(N)(:,iq++) ; k1101111101 = eye(N)(:,iq++) ; k1101111110 = eye(N)(:,iq++) ; k1101111111 = eye(N)(:,iq++) ;
k1110000000 = eye(N)(:,iq++) ; k1110000001 = eye(N)(:,iq++) ; k1110000010 = eye(N)(:,iq++) ; k1110000011 = eye(N)(:,iq++) ;
k1110000100 = eye(N)(:,iq++) ; k1110000101 = eye(N)(:,iq++) ; k1110000110 = eye(N)(:,iq++) ; k1110000111 = eye(N)(:,iq++) ;
k1110001000 = eye(N)(:,iq++) ; k1110001001 = eye(N)(:,iq++) ; k1110001010 = eye(N)(:,iq++) ; k1110001011 = eye(N)(:,iq++) ;
k1110001100 = eye(N)(:,iq++) ; k1110001101 = eye(N)(:,iq++) ; k1110001110 = eye(N)(:,iq++) ; k1110001111 = eye(N)(:,iq++) ;
k1110010000 = eye(N)(:,iq++) ; k1110010001 = eye(N)(:,iq++) ; k1110010010 = eye(N)(:,iq++) ; k1110010011 = eye(N)(:,iq++) ;
k1110010100 = eye(N)(:,iq++) ; k1110010101 = eye(N)(:,iq++) ; k1110010110 = eye(N)(:,iq++) ; k1110010111 = eye(N)(:,iq++) ;
k1110011000 = eye(N)(:,iq++) ; k1110011001 = eye(N)(:,iq++) ; k1110011010 = eye(N)(:,iq++) ; k1110011011 = eye(N)(:,iq++) ;
k1110011100 = eye(N)(:,iq++) ; k1110011101 = eye(N)(:,iq++) ; k1110011110 = eye(N)(:,iq++) ; k1110011111 = eye(N)(:,iq++) ;
k1110100000 = eye(N)(:,iq++) ; k1110100001 = eye(N)(:,iq++) ; k1110100010 = eye(N)(:,iq++) ; k1110100011 = eye(N)(:,iq++) ;
k1110100100 = eye(N)(:,iq++) ; k1110100101 = eye(N)(:,iq++) ; k1110100110 = eye(N)(:,iq++) ; k1110100111 = eye(N)(:,iq++) ;
k1110101000 = eye(N)(:,iq++) ; k1110101001 = eye(N)(:,iq++) ; k1110101010 = eye(N)(:,iq++) ; k1110101011 = eye(N)(:,iq++) ;
k1110101100 = eye(N)(:,iq++) ; k1110101101 = eye(N)(:,iq++) ; k1110101110 = eye(N)(:,iq++) ; k1110101111 = eye(N)(:,iq++) ;
k1110110000 = eye(N)(:,iq++) ; k1110110001 = eye(N)(:,iq++) ; k1110110010 = eye(N)(:,iq++) ; k1110110011 = eye(N)(:,iq++) ;
k1110110100 = eye(N)(:,iq++) ; k1110110101 = eye(N)(:,iq++) ; k1110110110 = eye(N)(:,iq++) ; k1110110111 = eye(N)(:,iq++) ;
k1110111000 = eye(N)(:,iq++) ; k1110111001 = eye(N)(:,iq++) ; k1110111010 = eye(N)(:,iq++) ; k1110111011 = eye(N)(:,iq++) ;
k1110111100 = eye(N)(:,iq++) ; k1110111101 = eye(N)(:,iq++) ; k1110111110 = eye(N)(:,iq++) ; k1110111111 = eye(N)(:,iq++) ;
k1111000000 = eye(N)(:,iq++) ; k1111000001 = eye(N)(:,iq++) ; k1111000010 = eye(N)(:,iq++) ; k1111000011 = eye(N)(:,iq++) ;
k1111000100 = eye(N)(:,iq++) ; k1111000101 = eye(N)(:,iq++) ; k1111000110 = eye(N)(:,iq++) ; k1111000111 = eye(N)(:,iq++) ;
k1111001000 = eye(N)(:,iq++) ; k1111001001 = eye(N)(:,iq++) ; k1111001010 = eye(N)(:,iq++) ; k1111001011 = eye(N)(:,iq++) ;
k1111001100 = eye(N)(:,iq++) ; k1111001101 = eye(N)(:,iq++) ; k1111001110 = eye(N)(:,iq++) ; k1111001111 = eye(N)(:,iq++) ;
k1111010000 = eye(N)(:,iq++) ; k1111010001 = eye(N)(:,iq++) ; k1111010010 = eye(N)(:,iq++) ; k1111010011 = eye(N)(:,iq++) ;
k1111010100 = eye(N)(:,iq++) ; k1111010101 = eye(N)(:,iq++) ; k1111010110 = eye(N)(:,iq++) ; k1111010111 = eye(N)(:,iq++) ;
k1111011000 = eye(N)(:,iq++) ; k1111011001 = eye(N)(:,iq++) ; k1111011010 = eye(N)(:,iq++) ; k1111011011 = eye(N)(:,iq++) ;
k1111011100 = eye(N)(:,iq++) ; k1111011101 = eye(N)(:,iq++) ; k1111011110 = eye(N)(:,iq++) ; k1111011111 = eye(N)(:,iq++) ;
k1111100000 = eye(N)(:,iq++) ; k1111100001 = eye(N)(:,iq++) ; k1111100010 = eye(N)(:,iq++) ; k1111100011 = eye(N)(:,iq++) ;
k1111100100 = eye(N)(:,iq++) ; k1111100101 = eye(N)(:,iq++) ; k1111100110 = eye(N)(:,iq++) ; k1111100111 = eye(N)(:,iq++) ;
k1111101000 = eye(N)(:,iq++) ; k1111101001 = eye(N)(:,iq++) ; k1111101010 = eye(N)(:,iq++) ; k1111101011 = eye(N)(:,iq++) ;
k1111101100 = eye(N)(:,iq++) ; k1111101101 = eye(N)(:,iq++) ; k1111101110 = eye(N)(:,iq++) ; k1111101111 = eye(N)(:,iq++) ;
k1111110000 = eye(N)(:,iq++) ; k1111110001 = eye(N)(:,iq++) ; k1111110010 = eye(N)(:,iq++) ; k1111110011 = eye(N)(:,iq++) ;
k1111110100 = eye(N)(:,iq++) ; k1111110101 = eye(N)(:,iq++) ; k1111110110 = eye(N)(:,iq++) ; k1111110111 = eye(N)(:,iq++) ;
k1111111000 = eye(N)(:,iq++) ; k1111111001 = eye(N)(:,iq++) ; k1111111010 = eye(N)(:,iq++) ; k1111111011 = eye(N)(:,iq++) ;
k1111111100 = eye(N)(:,iq++) ; k1111111101 = eye(N)(:,iq++) ; k1111111110 = eye(N)(:,iq++) ; k1111111111 = eye(N)(:,iq++) ;









#6 qubits: 

 oNN = eye(16,16) ;    oNN(1,:) *= 0  ;
 oNN([2,3,5,9],:)  *= 1;  
 oNN([4,6,7,10,11,13],:) *= 2; 
 oNN([8,12,14,15],:)     *= 3;
 oNN(16,:)               *= 4

function  out_ket(vv,thrs) 
   #thrs = 1e-8  ;
    N=size(vv,1)  ;
    Nvecs = size(vv,2);
    ket_1 = {"0" , "1" };
    ket_2 = {"00", "01", "10", "11"}  ;
    ket_3 = {"000", "001" ,"010", "011",    "100", "101" ,"110", "111"  } ;
    ket_4 = {"0000", "0001" ,"0010", "0011", "0100", "0101" ,"0110", "0111", "1000", "1001" ,"1010", "1011",   "1100", "1101" ,"1110", "1111"} ;
    ket_5 = {"00000", "00001" ,"00010", "00011", "00100", "00101" ,"00110", "00111", "01000", "01001" ,"01010", "01011",   "01100", "01101" ,"01110", "01111", "10000", "10001" ,"10010", "10011", "10100", "10101" ,"10110", "10111", "11000", "11001" ,"11010", "11011",   "11100", "11101" ,"11110", "11111"} ;

    ket_6 = {"000000", "000001" ,"000010", "000011", "000100", "000101" ,"000110", "000111", "001000", "001001" ,"001010", "001011",   "001100", "001101" ,"001110", "001111", 
             "010000", "010001" ,"010010", "010011", "010100", "010101" ,"010110", "010111", "011000", "011001" ,"011010", "011011",   "011100", "011101" ,"011110", "011111", 
             "100000", "100001" ,"100010", "100011", "100100", "100101" ,"100110", "100111", "101000", "101001" ,"101010", "101011",   "101100", "101101" ,"101110", "101111", 
             "110000", "110001" ,"110010", "110011", "110100", "110101" ,"110110", "110111", "111000", "111001" ,"111010", "111011",   "111100", "111101" ,"111110", "111111"} ;

    ket_7 = {"0000000", "0000001" ,"0000010", "0000011", "0000100", "0000101" ,"0000110", "0000111", "0001000", "0001001" ,"0001010", "0001011",   "0001100", "0001101" ,"0001110", "0001111", 
             "0010000", "0010001" ,"0010010", "0010011", "0010100", "0010101" ,"0010110", "0010111", "0011000", "0011001" ,"0011010", "0011011",   "0011100", "0011101" ,"0011110", "0011111", 
             "0100000", "0100001" ,"0100010", "0100011", "0100100", "0100101" ,"0100110", "0100111", "0101000", "0101001" ,"0101010", "0101011",   "0101100", "0101101" ,"0101110", "0101111", 
             "0110000", "0110001" ,"0110010", "0110011", "0110100", "0110101" ,"0110110", "0110111", "0111000", "0111001" ,"0111010", "0111011",   "0111100", "0111101" ,"0111110", "0111111",
             "1000000", "1000001" ,"1000010", "1000011", "1000100", "1000101" ,"1000110", "1000111", "1001000", "1001001" ,"1001010", "1001011",   "1001100", "1001101" ,"1001110", "1001111", 
             "1010000", "1010001" ,"1010010", "1010011", "1010100", "1010101" ,"1010110", "1010111", "1011000", "1011001" ,"1011010", "1011011",   "1011100", "1011101" ,"1011110", "1011111", 
             "1100000", "1100001" ,"1100010", "1100011", "1100100", "1100101" ,"1100110", "1100111", "1101000", "1101001" ,"1101010", "1101011",   "1101100", "1101101" ,"1101110", "1101111", 
             "1110000", "1110001" ,"1110010", "1110011", "1110100", "1110101" ,"1110110", "1110111", "1111000", "1111001" ,"1111010", "1111011",   "1111100", "1111101" ,"1111110", "1111111"} ;


    ket_8 = {"00000000", "00000001" ,"00000010", "00000011", "00000100", "00000101" ,"00000110", "00000111", "00001000", "00001001" ,"00001010", "00001011",   "00001100", "00001101" ,"00001110", "00001111", 
             "00010000", "00010001" ,"00010010", "00010011", "00010100", "00010101" ,"00010110", "00010111", "00011000", "00011001" ,"00011010", "00011011",   "00011100", "00011101" ,"00011110", "00011111", 
             "00100000", "00100001" ,"00100010", "00100011", "00100100", "00100101" ,"00100110", "00100111", "00101000", "00101001" ,"00101010", "00101011",   "00101100", "00101101" ,"00101110", "00101111", 
             "00110000", "00110001" ,"00110010", "00110011", "00110100", "00110101" ,"00110110", "00110111", "00111000", "00111001" ,"00111010", "00111011",   "00111100", "00111101" ,"00111110", "00111111",
             "01000000", "01000001" ,"01000010", "01000011", "01000100", "01000101" ,"01000110", "01000111", "01001000", "01001001" ,"01001010", "01001011",   "01001100", "01001101" ,"01001110", "01001111", 
             "01010000", "01010001" ,"01010010", "01010011", "01010100", "01010101" ,"01010110", "01010111", "01011000", "01011001" ,"01011010", "01011011",   "01011100", "01011101" ,"01011110", "01011111", 
             "01100000", "01100001" ,"01100010", "01100011", "01100100", "01100101" ,"01100110", "01100111", "01101000", "01101001" ,"01101010", "01101011",   "01101100", "01101101" ,"01101110", "01101111", 
             "01110000", "01110001" ,"01110010", "01110011", "01110100", "01110101" ,"01110110", "01110111", "01111000", "01111001" ,"01111010", "01111011",   "01111100", "01111101" ,"01111110", "01111111", 
             "10000000", "10000001" ,"10000010", "10000011", "10000100", "10000101" ,"10000110", "10000111", "10001000", "10001001" ,"10001010", "10001011",   "10001100", "10001101" ,"10001110", "10001111", 
             "10010000", "10010001" ,"10010010", "10010011", "10010100", "10010101" ,"10010110", "10010111", "10011000", "10011001" ,"10011010", "10011011",   "10011100", "10011101" ,"10011110", "10011111", 
             "10100000", "10100001" ,"10100010", "10100011", "10100100", "10100101" ,"10100110", "10100111", "10101000", "10101001" ,"10101010", "10101011",   "10101100", "10101101" ,"10101110", "10101111", 
             "10110000", "10110001" ,"10110010", "10110011", "10110100", "10110101" ,"10110110", "10110111", "10111000", "10111001" ,"10111010", "10111011",   "10111100", "10111101" ,"10111110", "10111111",
             "11000000", "11000001" ,"11000010", "11000011", "11000100", "11000101" ,"11000110", "11000111", "11001000", "11001001" ,"11001010", "11001011",   "11001100", "11001101" ,"11001110", "11001111", 
             "11010000", "11010001" ,"11010010", "11010011", "11010100", "11010101" ,"11010110", "11010111", "11011000", "11011001" ,"11011010", "11011011",   "11011100", "11011101" ,"11011110", "11011111", 
             "11100000", "11100001" ,"11100010", "11100011", "11100100", "11100101" ,"11100110", "11100111", "11101000", "11101001" ,"11101010", "11101011",   "11101100", "11101101" ,"11101110", "11101111", 
             "11110000", "11110001" ,"11110010", "11110011", "11110100", "11110101" ,"11110110", "11110111", "11111000", "11111001" ,"11111010", "11111011",   "11111100", "11111101" ,"11111110", "11111111"} ;


ket_9 = {"000000000", "000000001" ,"000000010", "000000011", "000000100", "000000101" ,"000000110", "000000111", "000001000", "000001001" ,"000001010", "000001011", "000001100", "000001101" ,"000001110", "000001111", 
         "000010000", "000010001" ,"000010010", "000010011", "000010100", "000010101" ,"000010110", "000010111", "000011000", "000011001" ,"000011010", "000011011", "000011100", "000011101" ,"000011110", "000011111", 
         "000100000", "000100001" ,"000100010", "000100011", "000100100", "000100101" ,"000100110", "000100111", "000101000", "000101001" ,"000101010", "000101011", "000101100", "000101101" ,"000101110", "000101111", 
         "000110000", "000110001" ,"000110010", "000110011", "000110100", "000110101" ,"000110110", "000110111", "000111000", "000111001" ,"000111010", "000111011", "000111100", "000111101" ,"000111110", "000111111",
         "001000000", "001000001" ,"001000010", "001000011", "001000100", "001000101" ,"001000110", "001000111", "001001000", "001001001" ,"001001010", "001001011", "001001100", "001001101" ,"001001110", "001001111", 
         "001010000", "001010001" ,"001010010", "001010011", "001010100", "001010101" ,"001010110", "001010111", "001011000", "001011001" ,"001011010", "001011011", "001011100", "001011101" ,"001011110", "001011111", 
         "001100000", "001100001" ,"001100010", "001100011", "001100100", "001100101" ,"001100110", "001100111", "001101000", "001101001" ,"001101010", "001101011", "001101100", "001101101" ,"001101110", "001101111", 
         "001110000", "001110001" ,"001110010", "001110011", "001110100", "001110101" ,"001110110", "001110111", "001111000", "001111001" ,"001111010", "001111011", "001111100", "001111101" ,"001111110", "001111111", 
         "010000000", "010000001" ,"010000010", "010000011", "010000100", "010000101" ,"010000110", "010000111", "010001000", "010001001" ,"010001010", "010001011", "010001100", "010001101" ,"010001110", "010001111", 
         "010010000", "010010001" ,"010010010", "010010011", "010010100", "010010101" ,"010010110", "010010111", "010011000", "010011001" ,"010011010", "010011011", "010011100", "010011101" ,"010011110", "010011111", 
         "010100000", "010100001" ,"010100010", "010100011", "010100100", "010100101" ,"010100110", "010100111", "010101000", "010101001" ,"010101010", "010101011", "010101100", "010101101" ,"010101110", "010101111", 
         "010110000", "010110001" ,"010110010", "010110011", "010110100", "010110101" ,"010110110", "010110111", "010111000", "010111001" ,"010111010", "010111011", "010111100", "010111101" ,"010111110", "010111111",
         "011000000", "011000001" ,"011000010", "011000011", "011000100", "011000101" ,"011000110", "011000111", "011001000", "011001001" ,"011001010", "011001011", "011001100", "011001101" ,"011001110", "011001111", 
         "011010000", "011010001" ,"011010010", "011010011", "011010100", "011010101" ,"011010110", "011010111", "011011000", "011011001" ,"011011010", "011011011", "011011100", "011011101" ,"011011110", "011011111", 
         "011100000", "011100001" ,"011100010", "011100011", "011100100", "011100101" ,"011100110", "011100111", "011101000", "011101001" ,"011101010", "011101011", "011101100", "011101101" ,"011101110", "011101111", 
         "011110000", "011110001" ,"011110010", "011110011", "011110100", "011110101" ,"011110110", "011110111", "011111000", "011111001" ,"011111010", "011111011", "011111100", "011111101" ,"011111110", "011111111", 
         "100000000", "100000001" ,"100000010", "100000011", "100000100", "100000101" ,"100000110", "100000111", "100001000", "100001001" ,"100001010", "100001011", "100001100", "100001101" ,"100001110", "100001111", 
         "100010000", "100010001" ,"100010010", "100010011", "100010100", "100010101" ,"100010110", "100010111", "100011000", "100011001" ,"100011010", "100011011", "100011100", "100011101" ,"100011110", "100011111", 
         "100100000", "100100001" ,"100100010", "100100011", "100100100", "100100101" ,"100100110", "100100111", "100101000", "100101001" ,"100101010", "100101011", "100101100", "100101101" ,"100101110", "100101111", 
         "100110000", "100110001" ,"100110010", "100110011", "100110100", "100110101" ,"100110110", "100110111", "100111000", "100111001" ,"100111010", "100111011", "100111100", "100111101" ,"100111110", "100111111",
         "101000000", "101000001" ,"101000010", "101000011", "101000100", "101000101" ,"101000110", "101000111", "101001000", "101001001" ,"101001010", "101001011", "101001100", "101001101" ,"101001110", "101001111", 
         "101010000", "101010001" ,"101010010", "101010011", "101010100", "101010101" ,"101010110", "101010111", "101011000", "101011001" ,"101011010", "101011011", "101011100", "101011101" ,"101011110", "101011111", 
         "101100000", "101100001" ,"101100010", "101100011", "101100100", "101100101" ,"101100110", "101100111", "101101000", "101101001" ,"101101010", "101101011", "101101100", "101101101" ,"101101110", "101101111", 
         "101110000", "101110001" ,"101110010", "101110011", "101110100", "101110101" ,"101110110", "101110111", "101111000", "101111001" ,"101111010", "101111011", "101111100", "101111101" ,"101111110", "101111111", 
         "110000000", "110000001" ,"110000010", "110000011", "110000100", "110000101" ,"110000110", "110000111", "110001000", "110001001" ,"110001010", "110001011", "110001100", "110001101" ,"110001110", "110001111", 
         "110010000", "110010001" ,"110010010", "110010011", "110010100", "110010101" ,"110010110", "110010111", "110011000", "110011001" ,"110011010", "110011011", "110011100", "110011101" ,"110011110", "110011111", 
         "110100000", "110100001" ,"110100010", "110100011", "110100100", "110100101" ,"110100110", "110100111", "110101000", "110101001" ,"110101010", "110101011", "110101100", "110101101" ,"110101110", "110101111", 
         "110110000", "110110001" ,"110110010", "110110011", "110110100", "110110101" ,"110110110", "110110111", "110111000", "110111001" ,"110111010", "110111011", "110111100", "110111101" ,"110111110", "110111111",
         "111000000", "111000001" ,"111000010", "111000011", "111000100", "111000101" ,"111000110", "111000111", "111001000", "111001001" ,"111001010", "111001011", "111001100", "111001101" ,"111001110", "111001111", 
         "111010000", "111010001" ,"111010010", "111010011", "111010100", "111010101" ,"111010110", "111010111", "111011000", "111011001" ,"111011010", "111011011", "111011100", "111011101" ,"111011110", "111011111", 
         "111100000", "111100001" ,"111100010", "111100011", "111100100", "111100101" ,"111100110", "111100111", "111101000", "111101001" ,"111101010", "111101011", "111101100", "111101101" ,"111101110", "111101111", 
         "111110000", "111110001" ,"111110010", "111110011", "111110100", "111110101" ,"111110110", "111110111", "111111000", "111111001" ,"111111010", "111111011", "111111100", "111111101" ,"111111110", "111111111"} ;


ket_10= {"0000000000", "0000000001" ,"0000000010", "0000000011", "0000000100", "0000000101" ,"0000000110", "0000000111", "0000001000", "0000001001" ,"0000001010", "0000001011", "0000001100", "0000001101" ,"0000001110", "0000001111", 
         "0000010000", "0000010001" ,"0000010010", "0000010011", "0000010100", "0000010101" ,"0000010110", "0000010111", "0000011000", "0000011001" ,"0000011010", "0000011011", "0000011100", "0000011101" ,"0000011110", "0000011111", 
         "0000100000", "0000100001" ,"0000100010", "0000100011", "0000100100", "0000100101" ,"0000100110", "0000100111", "0000101000", "0000101001" ,"0000101010", "0000101011", "0000101100", "0000101101" ,"0000101110", "0000101111", 
         "0000110000", "0000110001" ,"0000110010", "0000110011", "0000110100", "0000110101" ,"0000110110", "0000110111", "0000111000", "0000111001" ,"0000111010", "0000111011", "0000111100", "0000111101" ,"0000111110", "0000111111",
         "0001000000", "0001000001" ,"0001000010", "0001000011", "0001000100", "0001000101" ,"0001000110", "0001000111", "0001001000", "0001001001" ,"0001001010", "0001001011", "0001001100", "0001001101" ,"0001001110", "0001001111", 
         "0001010000", "0001010001" ,"0001010010", "0001010011", "0001010100", "0001010101" ,"0001010110", "0001010111", "0001011000", "0001011001" ,"0001011010", "0001011011", "0001011100", "0001011101" ,"0001011110", "0001011111", 
         "0001100000", "0001100001" ,"0001100010", "0001100011", "0001100100", "0001100101" ,"0001100110", "0001100111", "0001101000", "0001101001" ,"0001101010", "0001101011", "0001101100", "0001101101" ,"0001101110", "0001101111", 
         "0001110000", "0001110001" ,"0001110010", "0001110011", "0001110100", "0001110101" ,"0001110110", "0001110111", "0001111000", "0001111001" ,"0001111010", "0001111011", "0001111100", "0001111101" ,"0001111110", "0001111111", 
         "0010000000", "0010000001" ,"0010000010", "0010000011", "0010000100", "0010000101" ,"0010000110", "0010000111", "0010001000", "0010001001" ,"0010001010", "0010001011", "0010001100", "0010001101" ,"0010001110", "0010001111", 
         "0010010000", "0010010001" ,"0010010010", "0010010011", "0010010100", "0010010101" ,"0010010110", "0010010111", "0010011000", "0010011001" ,"0010011010", "0010011011", "0010011100", "0010011101" ,"0010011110", "0010011111", 
         "0010100000", "0010100001" ,"0010100010", "0010100011", "0010100100", "0010100101" ,"0010100110", "0010100111", "0010101000", "0010101001" ,"0010101010", "0010101011", "0010101100", "0010101101" ,"0010101110", "0010101111", 
         "0010110000", "0010110001" ,"0010110010", "0010110011", "0010110100", "0010110101" ,"0010110110", "0010110111", "0010111000", "0010111001" ,"0010111010", "0010111011", "0010111100", "0010111101" ,"0010111110", "0010111111",
         "0011000000", "0011000001" ,"0011000010", "0011000011", "0011000100", "0011000101" ,"0011000110", "0011000111", "0011001000", "0011001001" ,"0011001010", "0011001011", "0011001100", "0011001101" ,"0011001110", "0011001111", 
         "0011010000", "0011010001" ,"0011010010", "0011010011", "0011010100", "0011010101" ,"0011010110", "0011010111", "0011011000", "0011011001" ,"0011011010", "0011011011", "0011011100", "0011011101" ,"0011011110", "0011011111", 
         "0011100000", "0011100001" ,"0011100010", "0011100011", "0011100100", "0011100101" ,"0011100110", "0011100111", "0011101000", "0011101001" ,"0011101010", "0011101011", "0011101100", "0011101101" ,"0011101110", "0011101111", 
         "0011110000", "0011110001" ,"0011110010", "0011110011", "0011110100", "0011110101" ,"0011110110", "0011110111", "0011111000", "0011111001" ,"0011111010", "0011111011", "0011111100", "0011111101" ,"0011111110", "0011111111", 
         "0100000000", "0100000001" ,"0100000010", "0100000011", "0100000100", "0100000101" ,"0100000110", "0100000111", "0100001000", "0100001001" ,"0100001010", "0100001011", "0100001100", "0100001101" ,"0100001110", "0100001111", 
         "0100010000", "0100010001" ,"0100010010", "0100010011", "0100010100", "0100010101" ,"0100010110", "0100010111", "0100011000", "0100011001" ,"0100011010", "0100011011", "0100011100", "0100011101" ,"0100011110", "0100011111", 
         "0100100000", "0100100001" ,"0100100010", "0100100011", "0100100100", "0100100101" ,"0100100110", "0100100111", "0100101000", "0100101001" ,"0100101010", "0100101011", "0100101100", "0100101101" ,"0100101110", "0100101111", 
         "0100110000", "0100110001" ,"0100110010", "0100110011", "0100110100", "0100110101" ,"0100110110", "0100110111", "0100111000", "0100111001" ,"0100111010", "0100111011", "0100111100", "0100111101" ,"0100111110", "0100111111",
         "0101000000", "0101000001" ,"0101000010", "0101000011", "0101000100", "0101000101" ,"0101000110", "0101000111", "0101001000", "0101001001" ,"0101001010", "0101001011", "0101001100", "0101001101" ,"0101001110", "0101001111", 
         "0101010000", "0101010001" ,"0101010010", "0101010011", "0101010100", "0101010101" ,"0101010110", "0101010111", "0101011000", "0101011001" ,"0101011010", "0101011011", "0101011100", "0101011101" ,"0101011110", "0101011111", 
         "0101100000", "0101100001" ,"0101100010", "0101100011", "0101100100", "0101100101" ,"0101100110", "0101100111", "0101101000", "0101101001" ,"0101101010", "0101101011", "0101101100", "0101101101" ,"0101101110", "0101101111", 
         "0101110000", "0101110001" ,"0101110010", "0101110011", "0101110100", "0101110101" ,"0101110110", "0101110111", "0101111000", "0101111001" ,"0101111010", "0101111011", "0101111100", "0101111101" ,"0101111110", "0101111111", 
         "0110000000", "0110000001" ,"0110000010", "0110000011", "0110000100", "0110000101" ,"0110000110", "0110000111", "0110001000", "0110001001" ,"0110001010", "0110001011", "0110001100", "0110001101" ,"0110001110", "0110001111", 
         "0110010000", "0110010001" ,"0110010010", "0110010011", "0110010100", "0110010101" ,"0110010110", "0110010111", "0110011000", "0110011001" ,"0110011010", "0110011011", "0110011100", "0110011101" ,"0110011110", "0110011111", 
         "0110100000", "0110100001" ,"0110100010", "0110100011", "0110100100", "0110100101" ,"0110100110", "0110100111", "0110101000", "0110101001" ,"0110101010", "0110101011", "0110101100", "0110101101" ,"0110101110", "0110101111", 
         "0110110000", "0110110001" ,"0110110010", "0110110011", "0110110100", "0110110101" ,"0110110110", "0110110111", "0110111000", "0110111001" ,"0110111010", "0110111011", "0110111100", "0110111101" ,"0110111110", "0110111111",
         "0111000000", "0111000001" ,"0111000010", "0111000011", "0111000100", "0111000101" ,"0111000110", "0111000111", "0111001000", "0111001001" ,"0111001010", "0111001011", "0111001100", "0111001101" ,"0111001110", "0111001111", 
         "0111010000", "0111010001" ,"0111010010", "0111010011", "0111010100", "0111010101" ,"0111010110", "0111010111", "0111011000", "0111011001" ,"0111011010", "0111011011", "0111011100", "0111011101" ,"0111011110", "0111011111", 
         "0111100000", "0111100001" ,"0111100010", "0111100011", "0111100100", "0111100101" ,"0111100110", "0111100111", "0111101000", "0111101001" ,"0111101010", "0111101011", "0111101100", "0111101101" ,"0111101110", "0111101111", 
         "0111110000", "0111110001" ,"0111110010", "0111110011", "0111110100", "0111110101" ,"0111110110", "0111110111", "0111111000", "0111111001" ,"0111111010", "0111111011", "0111111100", "0111111101" ,"0111111110", "0111111111", 
         "1000000000", "1000000001" ,"1000000010", "1000000011", "1000000100", "1000000101" ,"1000000110", "1000000111", "1000001000", "1000001001" ,"1000001010", "1000001011", "1000001100", "1000001101" ,"1000001110", "1000001111", 
         "1000010000", "1000010001" ,"1000010010", "1000010011", "1000010100", "1000010101" ,"1000010110", "1000010111", "1000011000", "1000011001" ,"1000011010", "1000011011", "1000011100", "1000011101" ,"1000011110", "1000011111", 
         "1000100000", "1000100001" ,"1000100010", "1000100011", "1000100100", "1000100101" ,"1000100110", "1000100111", "1000101000", "1000101001" ,"1000101010", "1000101011", "1000101100", "1000101101" ,"1000101110", "1000101111", 
         "1000110000", "1000110001" ,"1000110010", "1000110011", "1000110100", "1000110101" ,"1000110110", "1000110111", "1000111000", "1000111001" ,"1000111010", "1000111011", "1000111100", "1000111101" ,"1000111110", "1000111111",
         "1001000000", "1001000001" ,"1001000010", "1001000011", "1001000100", "1001000101" ,"1001000110", "1001000111", "1001001000", "1001001001" ,"1001001010", "1001001011", "1001001100", "1001001101" ,"1001001110", "1001001111", 
         "1001010000", "1001010001" ,"1001010010", "1001010011", "1001010100", "1001010101" ,"1001010110", "1001010111", "1001011000", "1001011001" ,"1001011010", "1001011011", "1001011100", "1001011101" ,"1001011110", "1001011111", 
         "1001100000", "1001100001" ,"1001100010", "1001100011", "1001100100", "1001100101" ,"1001100110", "1001100111", "1001101000", "1001101001" ,"1001101010", "1001101011", "1001101100", "1001101101" ,"1001101110", "1001101111", 
         "1001110000", "1001110001" ,"1001110010", "1001110011", "1001110100", "1001110101" ,"1001110110", "1001110111", "1001111000", "1001111001" ,"1001111010", "1001111011", "1001111100", "1001111101" ,"1001111110", "1001111111", 
         "1010000000", "1010000001" ,"1010000010", "1010000011", "1010000100", "1010000101" ,"1010000110", "1010000111", "1010001000", "1010001001" ,"1010001010", "1010001011", "1010001100", "1010001101" ,"1010001110", "1010001111", 
         "1010010000", "1010010001" ,"1010010010", "1010010011", "1010010100", "1010010101" ,"1010010110", "1010010111", "1010011000", "1010011001" ,"1010011010", "1010011011", "1010011100", "1010011101" ,"1010011110", "1010011111", 
         "1010100000", "1010100001" ,"1010100010", "1010100011", "1010100100", "1010100101" ,"1010100110", "1010100111", "1010101000", "1010101001" ,"1010101010", "1010101011", "1010101100", "1010101101" ,"1010101110", "1010101111", 
         "1010110000", "1010110001" ,"1010110010", "1010110011", "1010110100", "1010110101" ,"1010110110", "1010110111", "1010111000", "1010111001" ,"1010111010", "1010111011", "1010111100", "1010111101" ,"1010111110", "1010111111",
         "1011000000", "1011000001" ,"1011000010", "1011000011", "1011000100", "1011000101" ,"1011000110", "1011000111", "1011001000", "1011001001" ,"1011001010", "1011001011", "1011001100", "1011001101" ,"1011001110", "1011001111", 
         "1011010000", "1011010001" ,"1011010010", "1011010011", "1011010100", "1011010101" ,"1011010110", "1011010111", "1011011000", "1011011001" ,"1011011010", "1011011011", "1011011100", "1011011101" ,"1011011110", "1011011111", 
         "1011100000", "1011100001" ,"1011100010", "1011100011", "1011100100", "1011100101" ,"1011100110", "1011100111", "1011101000", "1011101001" ,"1011101010", "1011101011", "1011101100", "1011101101" ,"1011101110", "1011101111", 
         "1011110000", "1011110001" ,"1011110010", "1011110011", "1011110100", "1011110101" ,"1011110110", "1011110111", "1011111000", "1011111001" ,"1011111010", "1011111011", "1011111100", "1011111101" ,"1011111110", "1011111111", 
         "1100000000", "1100000001" ,"1100000010", "1100000011", "1100000100", "1100000101" ,"1100000110", "1100000111", "1100001000", "1100001001" ,"1100001010", "1100001011", "1100001100", "1100001101" ,"1100001110", "1100001111", 
         "1100010000", "1100010001" ,"1100010010", "1100010011", "1100010100", "1100010101" ,"1100010110", "1100010111", "1100011000", "1100011001" ,"1100011010", "1100011011", "1100011100", "1100011101" ,"1100011110", "1100011111", 
         "1100100000", "1100100001" ,"1100100010", "1100100011", "1100100100", "1100100101" ,"1100100110", "1100100111", "1100101000", "1100101001" ,"1100101010", "1100101011", "1100101100", "1100101101" ,"1100101110", "1100101111", 
         "1100110000", "1100110001" ,"1100110010", "1100110011", "1100110100", "1100110101" ,"1100110110", "1100110111", "1100111000", "1100111001" ,"1100111010", "1100111011", "1100111100", "1100111101" ,"1100111110", "1100111111",
         "1101000000", "1101000001" ,"1101000010", "1101000011", "1101000100", "1101000101" ,"1101000110", "1101000111", "1101001000", "1101001001" ,"1101001010", "1101001011", "1101001100", "1101001101" ,"1101001110", "1101001111", 
         "1101010000", "1101010001" ,"1101010010", "1101010011", "1101010100", "1101010101" ,"1101010110", "1101010111", "1101011000", "1101011001" ,"1101011010", "1101011011", "1101011100", "1101011101" ,"1101011110", "1101011111", 
         "1101100000", "1101100001" ,"1101100010", "1101100011", "1101100100", "1101100101" ,"1101100110", "1101100111", "1101101000", "1101101001" ,"1101101010", "1101101011", "1101101100", "1101101101" ,"1101101110", "1101101111", 
         "1101110000", "1101110001" ,"1101110010", "1101110011", "1101110100", "1101110101" ,"1101110110", "1101110111", "1101111000", "1101111001" ,"1101111010", "1101111011", "1101111100", "1101111101" ,"1101111110", "1101111111", 
         "1110000000", "1110000001" ,"1110000010", "1110000011", "1110000100", "1110000101" ,"1110000110", "1110000111", "1110001000", "1110001001" ,"1110001010", "1110001011", "1110001100", "1110001101" ,"1110001110", "1110001111", 
         "1110010000", "1110010001" ,"1110010010", "1110010011", "1110010100", "1110010101" ,"1110010110", "1110010111", "1110011000", "1110011001" ,"1110011010", "1110011011", "1110011100", "1110011101" ,"1110011110", "1110011111", 
         "1110100000", "1110100001" ,"1110100010", "1110100011", "1110100100", "1110100101" ,"1110100110", "1110100111", "1110101000", "1110101001" ,"1110101010", "1110101011", "1110101100", "1110101101" ,"1110101110", "1110101111", 
         "1110110000", "1110110001" ,"1110110010", "1110110011", "1110110100", "1110110101" ,"1110110110", "1110110111", "1110111000", "1110111001" ,"1110111010", "1110111011", "1110111100", "1110111101" ,"1110111110", "1110111111",
         "1111000000", "1111000001" ,"1111000010", "1111000011", "1111000100", "1111000101" ,"1111000110", "1111000111", "1111001000", "1111001001" ,"1111001010", "1111001011", "1111001100", "1111001101" ,"1111001110", "1111001111", 
         "1111010000", "1111010001" ,"1111010010", "1111010011", "1111010100", "1111010101" ,"1111010110", "1111010111", "1111011000", "1111011001" ,"1111011010", "1111011011", "1111011100", "1111011101" ,"1111011110", "1111011111", 
         "1111100000", "1111100001" ,"1111100010", "1111100011", "1111100100", "1111100101" ,"1111100110", "1111100111", "1111101000", "1111101001" ,"1111101010", "1111101011", "1111101100", "1111101101" ,"1111101110", "1111101111", 
         "1111110000", "1111110001" ,"1111110010", "1111110011", "1111110100", "1111110101" ,"1111110110", "1111110111", "1111111000", "1111111001" ,"1111111010", "1111111011", "1111111100", "1111111101" ,"1111111110", "1111111111"} ;





    
   if      (N==2^1) ; myket= ket_1  ;
   elseif  (N==2^2) ; myket= ket_2  ;
   elseif  (N==2^3) ; myket= ket_3  ;
   elseif  (N==2^4) ; myket= ket_4  ;
   elseif  (N==2^5) ; myket= ket_5  ;
   elseif  (N==2^6) ; myket= ket_6  ;
   elseif  (N==2^7) ; myket= ket_7  ;
   elseif  (N==2^8) ; myket= ket_8  ;
   elseif  (N==2^9) ; myket= ket_9  ;
   elseif  (N==2^10); myket= ket_10  ;
   endif

   for  ivec =1: Nvecs 
      if (Nvecs >1)  printf(" %5d : ", ivec);  endif
      v =vv (:,ivec);
      [a,perm] = sort(-abs(v)) ;    # sort from highest  Abs value to lowest  
      printf("0");
      count =0;    # count kets printed
      for i=1:N 
           ii = perm(i)  ;
           cc = v(ii)   ;
           Abs_cc =  abs(cc)  ;
           Re_cc  =  real(cc) ; 
           Im_cc  =  imag(cc) ;
           #if (abs(cc) > thrs && imag(cc)==0 )  printf("     %.4f * |%s>     +",v(ii), myket{ii});  endif
           #if (abs(cc) > thrs && imag(cc)!=0 )  printf("    ( %.4f+ %.4fj) * |%s>     +",real(v(ii)),imag(v(ii)), myket{ii});  endif
           if  (abs(cc) > thrs) 
             printf( "\b ");
             count ++ ;
            #if      (Im_cc ==0) ; printf( "   %.4f * |%s>     + "       ,Re_cc, myket{ii}); 
            #elseif  (Re_cc ==0) ; printf("   %.4fj * |%s>     + "       ,Im_cc, myket{ii});  
             if      (abs(Im_cc)  < thrs) ; printf( "   %.4f * |%s>     + "       ,Re_cc, myket{ii}); 
             elseif  (abs(Re_cc)  < thrs) ; printf("   %.4fj * |%s>     + "       ,Im_cc, myket{ii});  
             else                ; printf("  ( %.4f+ %.4fj) * |%s>    + ",Re_cc,Im_cc, myket{ii})  ; endif 
           endif 
      endfor 
      if (count>0) printf("\b\b") ;endif ; printf(" \n");
  endfor
endfunction 


function   out(v)
    thrs=1e-3  ;  
    out_ket(v,thrs);
endfunction 



function  CX =  CX(ic0,ix0,Nbits)
    N= 2^Nbits; 
    CX =zeros(N,N)  ;
    if (ix0==ic0)  CX =0; printf("Error:  ix=ic in CX\n"); return ; endif;  

    # we have bit numbering from the right, but we want from left. So let us translate:  
    ix =  Nbits + 1 - ix0 ; 
    ic =  Nbits + 1 - ic0 ;
    for i=0:N-1
      dec2bin(i) ;
       bitc  =  bitget(i,ic) ;
       bitx  =  bitget(i,ix) ;
       bitcx =  xor(bitc,bitx) ;  
       icx   = bitset(i,ix,bitcx) ;
      #printf(" %5d   %6s  : %5d %5d : xor %5d \n",i+1,dec2bin(i), bitx ,bitx, xor(bitget(i,ic ),  bitget(i,ix )))
     # printf(" %5d   %6s  : %5d %5d : xor %5d \n",i+1,dec2bin(i), bitx ,bitx, xor(bitc,bitx)) 
      #printf("JJ:   %d %d :  %6s %6s \n",i, bitset(i,ix,bitcx), dec2bin(i),dec2bin( bitset(i,ix,bitcx) ))
     CX(i+1, icx+1) =1; 
    endfor  
endfunction

#------

function U = HWE(theta_vec) 
       t  = theta_vec  ;
       U  =  kron(Rx(t(1)) , Rx(t(2)),  Rx(t(3)) , Rx(t(4) )) ; 
       U1 =  CX(3,4,4) *  CX(2,3,4)  *  CX(1,2,4) ; 
       U  = U1*U  ; 
       U1 =  Rz(t(7 )) * Rx(t(6) ) * Rz(t(5) ) ;
       U2 =  Rz(t(10)) * Rx(t(9) ) * Rz(t(8) ) ;
       U3 =  Rz(t(13)) * Rx(t(12)) * Rz(t(11)) ;
       U4 =  Rz(t(16)) * Rx(t(15)) * Rz(t(14)) ;
       U  = kron(U1,U2,U3,U4)* U;

endfunction 


# from Zach: 
#X q0\nX q2\nRx(1.5708) q0\nH q1\nH q2\nH q3\nCNOT q0,q1\nCNOT q1,q2\nCNOT q2,q3\nRz(t1) q3\nCNOT q2,q3\nCNOT q1,q2\nCNOT q0,q1\nRx(-1.5708) q0\nH q1\nH q2\nH q3\n
function   U=ucc(theta)
        #t  = theta_vec  ;
        Nbits =4 ;
        HH = [1,1  ; 1,-1 ]/sqrt(2) ;   # Haddamard
        II  = [1,0 ;0,1];
        U0 = kron(Rx(pi/2) ,  HH, HH, HH) ; 
       #U1 = kron(II,II, CX(3,4))  * kron(II,CX(2,3), II) * kron(CX(1,2),II,II)  ;
        U1 = CX(3,4,Nbits)  * CX(2,3,Nbits)  * CX(1,2,Nbits)   ;
        U  =  kron(II,II,II,Rz(theta(1)))*  U1 * U0 ;  
       #U0 =  kron(CX(1,2),II,II) * kron(II,CX(2,3), II) *  kron(II,II, CX(3,4))  ; 
        U0 = CX(1,2,Nbits)  * CX(2,3,Nbits)  * CX(3,4,Nbits)   ;
        U1 =  kron(Rx(-pi/2),HH,HH,HH) ; 
        U   =  U1*U0*U ;      
# X q0 
# X q2
# Rx(1.5708) q0
# H q1
# H q2
# H q3
# CNOT q0,q1
# CNOT q1,q2
# CNOT q2,q3
# Rz(t1) q3
# CNOT q2,q3
# CNOT q1,q2
# CNOT q0,q1
# Rx(-1.5708) q0
# H q1
# H q2
# H q3
  
endfunction


function   U=ucc2(theta)
 #  Rx(pi/2) q0
 #  H q1
 #  CNOT q0, q1 
 #--
        #t  = theta_vec  ;
        Nbits =2 ;
        HH = [1,1  ; 1,-1 ]/sqrt(2) ;   # Haddamard
        II  = [1,0 ;0,1];
        U0 = kron(Rx(pi/2), HH ) ; 
        #U1 = CX(3,4,Nbits)  * CX(2,3,Nbits)  * CX(1,2,Nbits)   ;
        U1 =                                   CX(1,2,Nbits)   ;
        U  =  kron(II,Rz(theta))*  U1 * U0 ;  
       #U0 =  kron(CX(1,2),II,II) * kron(II,CX(2,3), II) *  kron(II,II, CX(3,4))  ; 
        U0 = CX(1,2,Nbits)                                     ;
        U1 =  kron(Rx(-pi/2),HH) ; 
        U   =  U1*U0*U ;      
endfunction





#--- init:
# X q0 
# X q2
#-------- UCCD
# Rx(1.5708) q0
# H q1
# H q2
# H q3
# CNOT q0,q1
# CNOT q1,q2
# CNOT q2,q3
# Rz(t1) q3
# CNOT q2,q3
# CNOT q1,q2
# CNOT q0,q1
# Rx(-1.5708) q0
# H q1
# H q2
# H q3
#----  UCCS on [q0, q1]
# Rx(1.5708) q0
# H q1
# CNOT q0,q1
# Rz(t2) q1
# CNOT q0,q1
# Rx(-1.5708) q0
# H q1
#----  UCCS on [q2, q3]
# Rx(1.5708) q2
# H q3
# CNOT q2,q3
# Rz(t3) q3
# CNOT q2,q3
# Rx(-1.5708) q2
# H q3
#------------------


function  U= ujj(theta)
        Nbits =4 ;
        HH = [1,1  ; 1,-1 ]/sqrt(2) ;   # Haddamard
        II  = [1,0 ;0,1];
        theta1 =  theta(1);  theta2 =  theta(2);  theta3 =  theta(3);  

#----  UCCS on [q0, q1]
# Rx(1.5708) q0
# H q1
# CNOT q0,q1
# Rz(t2) q1
# CNOT q0,q1
# Rx(-1.5708) q0
# H q1
     #  Nbits2 =2 ;
     #  U0 = kron(Rx(pi/2), HH ) ; 
     #  U1 =                                   CX(1,2,Nbits2)   ;
     #  U  =  kron(II,Rz(theta2))*  U1 * U0 ;  
     #  U0 = CX(1,2,Nbits2)                                     ;
     #  U1 =  kron(Rx(-pi/2),HH) ; 
     #  U  =  U1*U0*U ;      
     #  U_q1q2    =  U  ;      
#----  UCCS on [q2, q3]
# Rx(1.5708) q2
# H q3
# CNOT q2,q3
# Rz(t3) q3
# CNOT q2,q3
# Rx(-1.5708) q2
# H q3
     #  Nbits2 =2 ;
     #  U0 = kron(Rx(pi/2), HH ) ; 
     #  U1 =                                   CX(1,2,Nbits2)   ;
     #  U  =  kron(II,Rz(theta3))*  U1 * U0 ;  
     #  U0 = CX(1,2,Nbits2)                                     ;
     #  U1 =  kron(Rx(-pi/2),HH) ; 
     #  U   =  U1*U0*U ;      
     #  U_q3q4 = U ;

#--- ver2:

        U0 =  kron(Rx(pi/2), HH, Rx(pi/2), HH  ) ;
        U1 =  CX(1,2,Nbits) *   CX(3,4,Nbits)     ; 
        U  =   kron(II,Rz(theta2),II,Rz(theta3))  * U1* U0  ;
        U0 = CX(1,2,Nbits) * CX(3,4,Nbits)  ;
        U1 =  kron(Rx(-pi/2),HH, Rx(-pi/2),HH) ; 
        U  =   U1*U0*U ; 
        U_2q = U ;   
        

#-------- UCCD
# Rx(1.5708) q0
# H q1
# H q2
# H q3
# CNOT q0,q1
# CNOT q1,q2
# CNOT q2,q3
# Rz(t1) q3
# CNOT q2,q3
# CNOT q1,q2
# CNOT q0,q1
# Rx(-1.5708) q0
# H q1
# H q2
# H q3
        U0 = kron(Rx(pi/2) ,  HH, HH, HH) ; 
        U1 = CX(3,4,Nbits)  * CX(2,3,Nbits)  * CX(1,2,Nbits)   ;
        U  =  kron(II,II,II,Rz(theta1))*  U1 * U0 ;  
        U0 = CX(1,2,Nbits)  * CX(2,3,Nbits)  * CX(3,4,Nbits)   ;
        U1 =  kron(Rx(-pi/2),HH,HH,HH) ; 
        U  =  U1*U0*U ;      
       # U  =  U*kron(U_q1q2,U_q3q4);
        U = U*  U_2q  ;         

endfunction


function  U= ujj2(theta)
        Nbits =4 ;
        HH = [1,1  ; 1,-1 ]/sqrt(2) ;   # Haddamard
        II  = [1,0 ;0,1];
        theta1 =  theta(1);  theta2 =  theta(2);  theta3 =  theta(3);  

#----  UCCS on [q0, q1]
# Rx(1.5708) q0
# H q1
# CNOT q0,q1
# Rz(t2) q1
## CNOT q0,q1
## Rx(-1.5708) q0
## H q1
#----  UCCS on [q2, q3]
# Rx(1.5708) q2
# H q3
# CNOT q2,q3
# Rz(t3) q3
# CNOT q2,q3
# Rx(-1.5708) q2
## H q3
#--- ver2:
        U0 =  kron(Rx(pi/2), HH, Rx(pi/2), HH  ) ;
        U1 =  CX(1,2,Nbits) *   CX(3,4,Nbits)     ; 
        U  =   kron(II,Rz(theta2),II,Rz(theta3))  * U1* U0  ;

        #U0 = CX(1,2,Nbits) * CX(3,4,Nbits)  ;
        U0 =  CX(3,4,Nbits)  ;
        #U1 = kron(Rx(-pi/2),HH, Rx(-pi/2),HH) ; 
        U1 =  kron(II,II,  Rx(-pi/2),II) ;
        U  =   U1*U0*U ; 
        U_2q = U ;   
        

#-------- UCCD
## Rx(1.5708) q0
## H q1
# H q2
## H q3
## CNOT q0,q1
# CNOT q1,q2
# CNOT q2,q3
# Rz(t1) q3
# CNOT q2,q3
# CNOT q1,q2
# CNOT q0,q1
# Rx(-1.5708) q0
# H q1
# H q2
# H q3
        #U0 = kron(Rx(pi/2) ,  HH, HH, HH) ; 
        U0 = kron(II, II,  HH, II)  ;
        #U1 = CX(3,4,Nbits)  * CX(2,3,Nbits)  * CX(1,2,Nbits)   ;
        U1 = CX(3,4,Nbits)  * CX(2,3,Nbits)  ; 
        U  =  kron(II,II,II,Rz(theta1))*  U1 * U0 ;  
        U0 = CX(1,2,Nbits)  * CX(2,3,Nbits)  * CX(3,4,Nbits)   ;
        U1 =  kron(Rx(-pi/2),HH,HH,HH) ; 
        U  =  U1*U0*U ;      
       # U  =  U*kron(U_q1q2,U_q3q4);
        U = U*  U_2q  ;         

endfunction


function  U= ujj_bad(theta)
        Nbits =4 ;
        HH = [1,1  ; 1,-1 ]/sqrt(2) ;   # Haddamard
        II  = [1,0 ;0,1];
        U0 = kron(Rx(pi/2) ,  HH, HH, HH) ; 
        U1 = CX(3,4,Nbits)  * CX(2,3,Nbits)  * CX(1,2,Nbits)   ;
        U  =  kron(II,II,II,Rz(theta(1)))*  U1 * U0 ;  
	
        #U0 = CX(1,2,Nbits)  * CX(2,3,Nbits)  * CX(3,4,Nbits)   ;
        U0 =                  CX(2,3,Nbits)  * CX(3,4,Nbits)   ;

        U1 =      kron(II,Rz(theta(2)), HH,HH)  ;
       # U  = CX(1,2,Nbits) * U1*U0*U            ; 

        U  =                 U1*U0*U            ; 
        U  = CX(1,2,Nbits) * U            ; 
        
        U0 =  kron(Rx(-pi/2),HH, Rx(pi/2),II)   ;
        U1 =  CX(3,4,Nbits)                     ;
        U  =  CX(3,4,Nbits)*kron(II,II,II,Rz(theta(3)))   *U1*U0 *U    ; 
        U  =   kron(II,II,Rx(-pi/2),HH)  * U                           ;
     #  U1 =  kron(Rx(-pi/2),HH,HH,HH) ; 
     #  U   =  U1*U0*U ;      
endfunction

#  U=  ucc(pi*0.0)  *  kron(ucc2(theta_1), ucc2(itheta_2))  #*k1010

#------  
#  minimizer:
# see here :  http://www.ieap.uni-kiel.de/lehre/vorlesungen/matlab/fit/fminsearch.pdf
# and here : https://stefan.angrick.me/finding-local-extrema-in-matlab-and-octave-via-fminbnd
#
# example 1;   a=0.0; jj2  = @(x) cos(x(1))*sin(a*x(2));    [xval, fval]=  fminsearch(jj2,[0,0])
# example 2: function f = myfun(x,a) ; 
#                     f = x(1)^2 + a*x(2)^2;
#            endfunction 
#            a=1.5 ;  x = fminsearch(@(x) myfun(x,a),[0,1])

# bra_H_ket  =  @(ket)   (ucc*ket)'*Ham*ket ;

#function  en =  bra_H_ket(ket0,  U, Ham) ;  
#          ket =U*ket0 ;
#          en =   ket' * Ham*  ket ;  
#endfunction   
#
#
#   fminsearch (@(theta)     ucc(theta)*ket *Ham*  ket*ucc(theta) , [0,0]


#####   RbH  system
# E_HF  =  k1010'*Ham*k1010
#       = -2908.116854610000
#
# E_FCI (RbH)  = -2908.125111742295  ;
#      |Psi_0> =    0.9877 * |1010>     +    -0.1218 * |0101>     +    0.0695 * |1001>     +    0.0695 * |0110>     

#[th, ff] =  fminsearch (@(th)     real((ucc(th)*k1010)'  *Ham*  ucc(th)*k1010)  , theta)
#         :   tt =    1.895810546875000e-01,  
#             ff = -2908.123223382969 
#           |Psi0 > =   0.9955 * |1010>     +    -0.0946 * |0101>     

#[th, ff] =  fminsearch (@(th)     real((kron(ucc2(th(1)), ucc2(th(2)))   *k1010)'  *Ham*    kron(ucc2(th(1)), ucc2(th(2)))*k1010)  , [2,2] )  
#         : th = [ 5.728347840127697e-07   1.348427315092428e-05a ] 
#           ff = -2908.116854609989
#           |Psi0> =     1.0000 * |1010>       

#--  reaches FCI:        
#[th, ff] =  fminsearch (@(th)     real((ucc(th(1))*kron(ucc2(th(2)), ucc2(th(3)))   *k1010)'  *Ham*   ucc(th(1))* kron(ucc2(th(2)), ucc2(th(3)))*k1010)  , [1,2,2] )
#         :  tt = [ 3.396378496268792   2.985677000662547   3.261962646028214 ]
#            ff = -2908.125111738876
#           out(UU*k1010) =  ( 0.9877+ 0.0000j) * |1010>    +    -0.1218 * |0101>     +    0.0695 * |0110>     +   ( 0.0694+ 0.0000j) * |1001>      
#





#---
#X q0 
#\nX q2
#\nRx(1.5708) q0
#\nH q1
#\nH q2
#\nH q3
#\nCNOT q0,q1
#\nCNOT q1,q2
#\nCNOT q2,q3
#\nRz(3.14159) q3
#\nCNOT q2,q3
#\nCNOT q1,q2
#\nCNOT q0,q1
#\nRx(-1.5708) q0
#\nH q1
#\nH q2
#\nH q3


