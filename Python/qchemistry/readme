

#  slicing test: 
#  II =  np.reshape([i1+ i2*10 +i3*100 +i4*1000  for i4 in range(4) for i3 in range(4) for  i2 in range(4) for i1 in range(4)], (4,4,4,4) )
#
#  III =  np.reshape([i1+ i2*10 +i3*100 +i4*1000  for i4 in range(8) for i3 in range(8) for  i2 in range(8) for i1 in range(8)], (8,8,8,8) )
#
#    octave style slicing:
#   II  [[0,2],:,:,:]   [:,[1,3],:,:]   [:,:,[0,3],:]   [:,:,:,[1,2]]
# ----  
#  For 4 electrons (Nel=4_ generate  single excitaitons (Nexc=1)  from the occ_list = [1,2,3,4]  into virt_list=[5,6,7,8,9,10]
#
#  from itertools import combinations  
#   Nel = 4 ; Nexc=  1; CIS_list = [ list(x+y)   for x in  combinations(occ_list, Nel-Nexc )  for y in  combinations(virt_list, Nexc)]
#
#  ...and double excitations:
#
#   Nel = 4 ; Nexc=  2; CID_list =[ list(x+y)   for x in  combinations(occ_list, Nel-Nexc )  for y in  combinations(virt_list, Nexc)]
#
#  CISD_List = CIS_list + CID_list 
#---- 
# HOWTO reload function (debugging):
#    let assume that my function "get_CI_ham" (debugged)  is in   "tmp.py"
#  
#   #main.py" 
#    import imp 
#    import tmp 
#    tmp.get_CI_ham( ...)     # old version
#
#    imp.reload(tmp)
#    tmp.get_CI_ham( ...)     # new  version
#
#---  example 2:
#      import imp  
#      from Modules  import hello 
#      

>>> from Modules  import hello 
>>> import imp
>>> hello.world()
Hello, World!
>>> hello.myfun(1,2)     
(2, 6)
#
# here " vi ./Modules/hello.py"  change  myfun()  function
#
>>> imp.reload(hello)
<module 'Modules.hello' from '/Users/j2c/Dropbox (ORNL)/P3HT-transport/H2-test/Modules/hello.py'>
>>> hello.myfun(1,2)
(2, 4)
>>> 


#----
import psi4
import numpy as np

import myutils


#  adding point charges:
# https://github.com/psi4/psi4/blob/master/tests/extern1/input.dat

molecule water {
  0 1
  O  -0.778803000000  0.000000000000  1.132683000000
  H  -0.666682000000  0.764099000000  1.706291000000
  H  -0.666682000000  -0.764099000000  1.706290000000
  symmetry c1
  no_reorient
  no_com
}


H2a_geometry = psi4.geometry ("""
0 1
H   0.000000   0.0      0.0
H   0.8        0.0      0.0 
symmetry c1
no_reorient
no_com
""")



LiHa_geometry = psi4.geometry ("""
0 1
Li   0.000000   0.0      0.0
H   1.0        0.0      0.0 
symmetry c1
no_reorient
no_com
""")


LiHb_geometry = psi4.geometry ("""
0 1
Li   0.000000   0.0      0.0
H   0.0        1.0      0.0 
symmetry c1
no_reorient
no_com
""")


LiHc_geometry = psi4.geometry ("""
0 1
Li   0.000000   0.0      0.0
H   0.0        0.0      1.0 
symmetry c1
no_reorient
no_com
""")




#------------------------------------------------------------------------------------------
# Get MO coefficients from SCF wavefunction
#
#scf:
#basis = '6-311G', '6-31G(d)', 'sto-3g',

psi4.set_options({'basis':        'sto-3g',
                  'scf_type':     'pk',
                  'mp2_type':     'conv',
                  'e_convergence': 1e-8,
                  'd_convergence': 1e-8})

#  Solve SCF: # Get the SCF wavefunction & energies
scf_e, scf_wfn = psi4.energy('scf', return_wfn=True,molecule=H2_geometry)
print("E(SCF):", scf_e, scf_wfn)

#nuclear repulsion energy
E_nucl = H2_geometry.nuclear_repulsion_energy()
print("Nuclear repulsion:", E_nucl)

#- get matrices  in a.o.
dir(scf_wfn)
Ovelap = np.array(scf_wfn.S())
Fa     =  np.array(scf_wfn.Fa())
H      =  np.array(scf_wfn.H())

#------------------------------------------------
#   various integrals

# Create instance of MintsHelper class:
mints   = psi4.core.MintsHelper(scf_wfn.basisset())
mints_a = psi4.core.MintsHelper(scf_wfn_a.basisset())
mints_b = psi4.core.MintsHelper(scf_wfn_b.basisset())
mints_c = psi4.core.MintsHelper(scf_wfn_c.basisset())

# Build core Hamiltonian
T = np.asarray(mints.ao_kinetic())
V = np.asarray(mints.ao_potential())
H_core_ao = T + V

#- dipole moment matrix
mux,muy,muz  = mints.ao_dipole()
print(np.array(mux)) 
print(np.array(muy))
print(np.array(muz))
# ==> ERIs <==


 


# 
